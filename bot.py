import os
from flask import Flask, request, abort, jsonify
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
)
import google.generativeai as genai
import logging
# A importa√ß√£o abaixo assume que faq_data.py est√° dentro da pasta base_conhecimento/
# Certifique-se de que faq_data.py est√° realmente l√° e que voc√™ removeu a vers√£o da raiz.
from base_conhecimento.faq_data import faq_data 

# --- Configura√ß√£o de Logging (Mantenha este bloco no topo) ---
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)
# --- Fim da Configura√ß√£o de Logging ---

# --- Vari√°veis de Ambiente ---
TELEGRAM_BOT_TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")
GEMINI_API_KEY = os.environ.get("GEMINI_API_KEY")

if not TELEGRAM_BOT_TOKEN:
    logger.critical("TELEGRAM_BOT_TOKEN n√£o encontrado nas vari√°veis de ambiente! O bot n√£o pode iniciar.")
    # N√£o levante erro fatal aqui, deixe o try-except principal lidar com isso
if not GEMINI_API_KEY:
    logger.critical("GEMINI_API_KEY n√£o encontrado nas vari√°veis de ambiente! A IA n√£o funcionar√°.")

# Configura a API Gemini
genai.configure(api_key=GEMINI_API_KEY)
model = genai.GenerativeModel('gemini-pro')

# Dicion√°rio para armazenar o hist√≥rico de conversa do Gemini
conversations = {}

# --- Fun√ß√µes do Bot ---

async def start(update: Update, context):
    user_id = update.effective_user.id
    user_name = update.effective_user.first_name
    logger.info(f"Comando /start recebido de {user_name} (ID: {user_id})")

    # Inicia uma nova conversa Gemini para o usu√°rio
    conversations[user_id] = model.start_chat(history=[])

    welcome_message = (
        "Fala, mestre! üç∫ Bem-vindo √† Loja CHOPP! O gar√ßom digital est√° aqui pra te ajudar. "
        "O que manda hoje?!\n\n"
        "üç∫ - Onde fica a loja?\n"
        "üïí - Qual nosso hor√°rio?\n"
        "üìú - Quero ver o card√°pio!\n"
        "üß† - Tirar uma d√∫vida com a IA!\n\n"
        "√â s√≥ pedir que eu trago a informa√ß√£o geladinha!"
    )
    await update.message.reply_text(welcome_message)

async def handle_message(update: Update, context):
    user_text = update.message.text.lower()
    user_id = update.effective_user.id
    user_name = update.effective_user.first_name
    logger.info(f"Mensagem recebida de {user_name} (ID: {user_id}): {user_text}")

    # Verifica se o usu√°rio quer usar a IA
    if "tirar uma d√∫vida com a ia" in user_text:
        await update.message.reply_text(
            "Certo! Estou ativando minha mente para suas perguntas. Pode mandar sua d√∫vida para a IA!"
        )
        context.user_data['using_ai'] = True
        return

    # Se o usu√°rio est√° no modo IA
    if context.user_data.get('using_ai', False):
        await send_to_gemini(update, context)
        return

    # L√≥gica de FAQ
    matched_faqs = []
    for item in faq_data:
        if any(keyword in user_text for keyword in item["palavras_chave"]):
            matched_faqs.append(item)

    if not matched_faqs:
        await update.message.reply_text("Desculpe, n√£o entendi. Posso te ajudar com o card√°pio, hor√°rios ou localiza√ß√£o?")
        logger.info(f"Nenhuma FAQ encontrada para: {user_text}")
    elif len(matched_faqs) == 1:
        await update.message.reply_text(matched_faqs[0]["resposta"])
        logger.info(f"Resposta direta da FAQ: {matched_faqs[0]['pergunta']}")
    else:
        keyboard = []
        for faq in matched_faqs:
            # Use 'pergunta' como texto do bot√£o e 'id' como callback_data
            keyboard.append([InlineKeyboardButton(faq["pergunta"], callback_data=str(faq["id"]))])
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            "Encontrei algumas op√ß√µes. Qual delas voc√™ gostaria de saber?", reply_markup=reply_markup
        )
        logger.info(f"M√∫ltiplas FAQs encontradas. Oferecendo bot√µes para: {[f['pergunta'] for f in matched_faqs]}")

async def button_callback_handler(update: Update, context):
    query = update.callback_query
    await query.answer()
    selected_faq_id = query.data
    user_name = update.effective_user.first_name
    logger.info(f"Bot√£o de FAQ pressionado por {user_name}: ID {selected_faq_id}")

    for item in faq_data:
        if str(item["id"]) == selected_faq_id:
            await query.edit_message_text(text=item["resposta"])
            logger.info(f"Resposta da FAQ por bot√£o: {item['pergunta']}")
            return
    logger.warning(f"ID de FAQ n√£o encontrado para callback_data: {selected_faq_id}")
    await query.edit_message_text(text="Desculpe, n√£o consegui encontrar a informa√ß√£o para essa op√ß√£o.")


async def send_to_gemini(update: Update, context):
    user_id = update.effective_user.id
    user_message = update.message.text
    user_name = update.effective_user.first_name
    logger.info(f"Enviando para Gemini de {user_name} (ID: {user_id}): {user_message}")

    if user_id not in conversations:
        logger.info(f"Iniciando nova conversa Gemini para o usu√°rio {user_id}")
        conversations[user_id] = model.start_chat(history=[])

    try:
        response = await conversations[user_id].send_message_async(user_message)
        gemini_response_text = response.text
        logger.info(f"Resposta do Gemini para {user_id}: {gemini_response_text}")
        await update.message.reply_text(gemini_response_text)
    except Exception as e:
        logger.error(f"Erro ao comunicar com a API Gemini para o usu√°rio {user_id}: {e}", exc_info=True)
        await update.message.reply_text("Desculpe, n√£o consegui processar sua pergunta com a IA no momento.")
    finally: # <-- Este 'finally' e o que vem depois estavam faltando!
        # Desativa o modo IA ap√≥s a resposta do Gemini ou erro
        context.user_data['using_ai'] = False
        logger.info(f"Modo IA desativado para o usu√°rio {user_id}.") # <-- Esta √© a linha 140 que estava incompleta

async def unknown(update: Update, context):
    logger.info(f"Comando desconhecido recebido: {update.message.text}")
    await update.message.reply_text("Desculpe, n√£o entendi esse comando. Tente `/start` para come√ßar.")

# --- Configura√ß√£o do Flask App ---
flask_app = Flask(__name__)

# ----------------- IN√çCIO DO BLOCO TRY-EXCEPT DE INICIALIZA√á√ÉO -----------------
try:
    if not TELEGRAM_BOT_TOKEN:
        raise ValueError("TELEGRAM_BOT_TOKEN n√£o est√° definido nas vari√°veis de ambiente. O bot n√£o pode ser iniciado.")

    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    # Adicionando Handlers
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(CallbackQueryHandler(button_callback_handler))
    application.add_handler(MessageHandler(filters.COMMAND, unknown)) # Para comandos n√£o reconhecidos

    # --- Configura√ß√£o do Webhook ---
    # Remova ou comente application.run_polling() se estiver aqui.

    @flask_app.route('/api/telegram/webhook', methods=['POST'])
    async def webhook_handler():
        logger.info("Webhook endpoint hit! (Recebendo requisi√ß√£o do Telegram)")
        if request.method == "POST":
            try:
                update = Update.de_json(request.get_json(force=True), application.bot)
                await application.process_update(update)
                logger.debug(f"Update processado com sucesso para update_id: {update.update_id}")
                return jsonify({"status": "ok"}), 200
            except Exception as e:
                logger.error(f"Erro ao processar atualiza√ß√£o do webhook: {e}", exc_info=True)
                return jsonify({"status": "error", "message": str(e)}), 500
        else:
            logger.warning(f"Requisi√ß√£o webhook com m√©todo HTTP inesperado: {request.method}")
            abort(400)

    logger.info("Bot Telegram e rota de webhook Flask configurados.")

except Exception as e:
    logger.critical(f"ERRO FATAL NA INICIALIZA√á√ÉO PRINCIPAL DO BOT: {e}", exc_info=True)
    raise

# --- Rota de Health Check ---
@flask_app.route('/health', methods=['GET'])
def health_check():
    logger.info("Rota /health acessada.")
    return "OK", 200

# --- Bloco para execu√ß√£o local (n√£o executado no Render com Gunicorn) ---
if __name__ == '__main__':
    # Para testar localmente, descomente as linhas abaixo e defina as vari√°veis de ambiente
    # os.environ["TELEGRAM_BOT_TOKEN"] = "SEU_TOKEN_AQUI"
    # os.environ["GEMINI_API_KEY"] = "SUA_CHAVE_GEMINI_AQUI"
    # logger.debug("Executando Flask app localmente...")
    # PORT = int(os.environ.get("PORT", 5000))
    # flask_app.run(host="0.0.0.0", port=PORT, debug=True)
    pass
