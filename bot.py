import logging
import os
import asyncio
import json
import threading
from flask import Flask, request, jsonify
from telegram import Update, Bot, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, MessageHandler, filters, CallbackQueryHandler, CommandHandler
from telegram.ext import ApplicationBuilder

# Para a fila com Redis
import redis
from rq import Queue, Worker
from rq.job import Job
from redis.exceptions import ConnectionError as RedisConnectionError # Importar o erro espec√≠fico

# --- Configura√ß√£o de Logging ---
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- Vari√°veis de Ambiente e Configura√ß√µes ---
TELEGRAM_BOT_TOKEN = os.getenv("BOT_TOKEN")
REDIS_URL = os.getenv("REDIS_URL", "redis://localhost:6379/0")

# Verifica√ß√£o para garantir que o token foi carregado
if not TELEGRAM_BOT_TOKEN:
    logger.critical("ERRO CR√çTICO: A vari√°vel de ambiente 'BOT_TOKEN' n√£o foi encontrada. Certifique-se de que est√° configurada no Render.")

# --- IN√çCIO: NOVAS LINHAS PARA DEBUGAR faq_data.json ---
# Obter o caminho absoluto do diret√≥rio do script atual
script_dir = os.path.dirname(os.path.abspath(__file__))
faq_file_path = os.path.join(script_dir, 'faq_data.json')

logger.info(f"Caminho absoluto do diret√≥rio do script: {script_dir}")
logger.info(f"Tentando carregar faq_data.json de: {faq_file_path}")

faq_data = {}
try:
    if not os.path.exists(faq_file_path):
        logger.critical(f"ERRO CR√çTICO: O arquivo faq_data.json N√ÉO foi encontrado em {faq_file_path}. Por favor, verifique a localiza√ß√£o do arquivo.")
    else:
        with open(faq_file_path, 'r', encoding='utf-8') as f:
            faq_data = json.load(f)
        logger.info("faq_data.json carregado com sucesso!")
except FileNotFoundError:
    logger.critical(f"ERRO CR√çTICO: O arquivo faq_data.json n√£o foi encontrado em {faq_file_path}. Worker n√£o poder√° iniciar.")
except json.JSONDecodeError as e:
    logger.critical(f"ERRO CR√çTICO: Erro ao carregar faq_data.json. Verifique o formato JSON: {e}")

# --- Configura√ß√£o do Redis (APENAS A PARTE DA CONEX√ÉO) ---
try:
    redis_conn = redis.from_url(
        REDIS_URL,
        decode_responses=True,
        # Removendo ssl_cert_reqs=None e ssl_check_hostname=False para permitir que a biblioteca Redis
        # negocie a conex√£o SSL automaticamente, o que geralmente resolve WRONG_VERSION_NUMBER
        # Se voc√™ tiver problemas persistentes, pode tentar reintroduzi-los COM CAREFUL.
    )
    redis_conn.ping() # Testar a conex√£o
    logger.info("Conex√£o com Redis estabelecida com sucesso.")
except RedisConnectionError as e:
    logger.critical(f"ERRO CR√çTICO: N√£o foi poss√≠vel conectar ao Redis em {REDIS_URL}. Verifique a URL e a disponibilidade do servi√ßo Redis. Worker n√£o poder√° iniciar: {e}")
    # √â CR√çTICO que o worker n√£o inicie sem Redis, ent√£o...
    exit(1) # Sai do processo se a conex√£o Redis falhar

# Configura√ß√£o da fila RQ
queue = Queue(connection=redis_conn)

# --- Fun√ß√µes do Bot ---

async def start(update: Update, context):
    await update.message.reply_text(faq_data.get("1", {}).get("resposta", "Ol√°! Como posso ajudar?"))

async def help_command(update: Update, context):
    await update.message.reply_text("Eu sou um bot de FAQ. Voc√™ pode me perguntar sobre chopps, eventos, etc.")

async def process_message(update: Update, context):
    user_message = update.message.text.lower()
    best_match = None
    max_matches = 0

    for key, data in faq_data.items():
        if "palavras_chave" in data:
            matches = sum(1 for keyword in data["palavras_chave"] if keyword in user_message)
            if matches > max_matches:
                max_matches = matches
                best_match = data["resposta"]
    
    if best_match:
        await update.message.reply_text(best_match)
    else:
        # Se n√£o encontrar correspond√™ncia, enfileira a pergunta para a IA
        user_id = update.effective_user.id
        message_id = update.message.message_id
        
        # Envia a mensagem de "pensando"
        thinking_message = await update.message.reply_text("ü§î Pensando na sua resposta...")
        
        # Enfileira a tarefa no Redis
        job = queue.enqueue(
            'bot_worker.process_ai_query', # 'bot_worker' √© o nome do seu arquivo worker, e 'process_ai_query' a fun√ß√£o
            {
                'user_id': user_id,
                'chat_id': update.effective_chat.id,
                'message_text': user_message,
                'thinking_message_id': thinking_message.message_id # Passa o ID da mensagem "pensando"
            },
            job_timeout=300 # Tempo limite maior para a IA
        )
        logger.info(f"Tarefa de IA enfileirada com ID: {job.id}")

async def button(update: Update, context):
    query = update.callback_query
    await query.answer()
    await query.edit_message_text(text=f"Voc√™ clicou no bot√£o: {query.data}")

# --- Configura√ß√£o do Flask para Webhook ---
app = Flask(__name__)

@app.route('/')
def index():
    return "Bot est√° rodando!"

@app.route('/webhook', methods=['POST'])
async def webhook():
    if request.method == "POST":
        update = Update.de_json(request.get_json(force=True), application.bot)
        await application.process_update(update)
        return jsonify({"status": "ok"}), 200
    return jsonify({"status": "bad request"}), 400

# --- In√≠cio do Bot ---
def run_bot():
    global application
    application = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()

    # Handlers
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CallbackQueryHandler(button))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, process_message))

    # Configurar webhook
    webhook_url = os.getenv("WEBHOOK_URL")
    if webhook_url:
        logger.info(f"Configurando webhook para: {webhook_url}/webhook")
        application.run_webhook(
            listen="0.0.0.0",
            port=int(os.getenv("PORT", "5000")),
            url_path="webhook",
            webhook_url=f"{webhook_url}/webhook"
        )
    else:
        logger.warning("WEBHOOK_URL n√£o configurada. O bot pode n√£o funcionar corretamente no Render.")
        # Se n√£o h√° webhook_url, podemos tentar polling para desenvolvimento local
        logger.info("Iniciando bot em modo polling para desenvolvimento local (se n√£o for no Render)...")
        application.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == "__main__":
    # Garante que o bot e o Flask rodem em threads diferentes ou com asyncio.run
    # Para o Render, run_webhook j√° √© non-blocking, ent√£o basta cham√°-lo
    run_bot()
