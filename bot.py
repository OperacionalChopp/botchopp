# bot.py (VERS√ÉO FINAL COM CORRE√á√ïES DE CAMINHO, L√ìGICA DE BUSCA E RESPOSTAS DE BOT√ïES)

import os
import json
from flask import Flask, request
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackQueryHandler

# --- Carregar dados do FAQ ---
FAQ_DATA = {}
try:
    # CORRE√á√ÉO CR√çTICA AQUI: Caminho do arquivo FAQ_DATA na subpasta
    with open('base_conhecimento/faq_data.json', 'r', encoding='utf-8') as f:
        FAQ_DATA = json.load(f)
    print(f"DEBUG: FAQ_DATA carregado com {len(FAQ_DATA)} entradas.")
    print(f"DEBUG: Conte√∫do de FAQ_DATA (primeiras 500 chars): {str(FAQ_DATA)[:500]}")
    if not FAQ_DATA:
        print("ALERTA: FAQ_DATA carregado mas est√° vazio. Verifique o conte√∫do do JSON.")
except FileNotFoundError:
    print("ERRO: faq_data.json n√£o encontrado. Certifique-se de que o arquivo 'base_conhecimento/faq_data.json' existe.")
    # Adicionar um fallback ou tratamento de erro adequado, talvez uma FAQ default
except json.JSONDecodeError:
    print("ERRO: faq_data.json com formato JSON inv√°lido. Verifique o conte√∫do e a sintaxe do arquivo JSON.")
    # Adicionar um fallback ou tratamento de erro adequado

# --- Seus handlers (comandos e mensagens) ---

async def start(update: Update, context):
    """Envia a mensagem de boas-vindas com bot√µes."""
    welcome_entry = FAQ_DATA.get("1")
    if welcome_entry:
        introduction_message = welcome_entry["resposta"]

        keyboard = [
            [InlineKeyboardButton("üìç Onde fica a loja?", callback_data="onde_fica")],
            [InlineKeyboardButton("üïí Qual nosso hor√°rio?", callback_data="horario")],
            [InlineKeyboardButton("üçî Quero ver o card√°pio", callback_data="cardapio")],
            [InlineKeyboardButton("üß† Tirar uma d√∫vida com a IA", callback_data="duvida_ia")],
            [InlineKeyboardButton("üìû Falar com algu√©m", callback_data="falar_com_alguem")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(introduction_message, reply_markup=reply_markup)
    else:
        await update.message.reply_text('Ol√°! Eu sou seu bot! Parece que a mensagem de boas-vindas n√£o foi carregada corretamente ou o FAQ_DATA est√° vazio. Por favor, verifique o arquivo FAQ.')

async def handle_message(update: Update, context):
    """
    Processa mensagens de texto (n√£o comandos) e tenta encontrar respostas no FAQ.
    Prioriza correspond√™ncias exatas e oferece bot√µes para correspond√™ncias parciais.
    """
    user_text = update.message.text.lower().strip() # Normaliza o texto do usu√°rio
    response_text = "Desculpe, n√£o consegui encontrar uma resposta exata para sua pergunta no momento. Por favor, tente reformular ou escolha uma das op√ß√µes abaixo."
    reply_markup = None
    
    # Lista para coletar FAQs que cont√™m as palavras-chave do usu√°rio
    potential_matches = [] 

    # --- L√≥gica de busca de correspond√™ncia ---
    # 1. Procura por correspond√™ncia EXATA da mensagem do usu√°rio com uma palavra-chave
    for faq_id, entry in FAQ_DATA.items():
        if faq_id == "1": # Pula a FAQ de boas-vindas
            continue
        
        entry_keywords = [kw.lower() for kw in entry.get("palavras_chave", [])]
        
        if user_text in entry_keywords: # Se a mensagem do usu√°rio √© uma palavra-chave EXATA
            response_text = entry["resposta"]
            if faq_id == "54": # ID para "Falar com algu√©m"
                reply_markup = InlineKeyboardMarkup([
                    [InlineKeyboardButton("üìû Ligar para a Loja", url="tel:+556139717502")],
                    [InlineKeyboardButton("üí¨ Abrir Chat", url="https://wa.me/556139717502")]
                ])
            await update.message.reply_text(response_text, reply_markup=reply_markup)
            return # Encontrou uma correspond√™ncia exata, termina a fun√ß√£o aqui

    # 2. Se n√£o encontrou correspond√™ncia exata, procura por palavras-chave CONTIDAS na mensagem
    for faq_id, entry in FAQ_DATA.items():
        if faq_id == "1": 
            continue
        
        entry_keywords = [kw.lower() for kw in entry.get("palavras_chave", [])]
        
        # Verifica se alguma palavra-chave da FAQ est√° contida na mensagem do usu√°rio
        # ou se alguma palavra da mensagem do usu√°rio est√° na palavra-chave da FAQ
        # Isso aumenta a flexibilidade da busca
        if any(kw in user_text for kw in entry_keywords) or \
           any(word in ' '.join(entry_keywords) for word in user_text.split()):
            
            # Adiciona a pergunta da FAQ como um bot√£o de op√ß√£o
            # Garante que n√£o adicione duplicatas
            if not any(btn[0].callback_data == faq_id for btn in potential_matches):
                potential_matches.append([InlineKeyboardButton(entry["pergunta"], callback_data=faq_id)])

    if potential_matches:
        # Se encontrou termos relacionados, oferece bot√µes de perguntas para o usu√°rio escolher
        await update.message.reply_text(
            "Encontrei algumas informa√ß√µes que podem ser √∫teis. Qual delas voc√™ gostaria de saber?",
            reply_markup=InlineKeyboardMarkup(potential_matches)
        )
    else:
        # Se n√£o encontrou nada espec√≠fico nem relacionado
        # Aqui voc√™ pode adicionar um fallback para a op√ß√£o "Falar com algu√©m" se desejar
        keyboard_fallback = [
            [InlineKeyboardButton("üìû Falar com algu√©m", callback_data="falar_com_alguem")]
        ]
        await update.message.reply_text(response_text, reply_markup=InlineKeyboardMarkup(keyboard_fallback))


async def handle_callback_query(update: Update, context):
    query = update.callback_query
    await query.answer() # Importante para remover o estado de carregamento do bot√£o

    callback_data = query.data 
    
    response_text = "Desculpe, n√£o consegui encontrar uma resposta para esta op√ß√£o."
    reply_markup = None

    # Mapeamento dos callback_data dos bot√µes iniciais para os IDs de FAQ correspondentes
    mapping = {
        "onde_fica": "5",     # "Como encontrar a loja Chopp Brahma Express mais pr√≥xima?"
        "horario": "3",       # "Qual √© o hor√°rio de atendimento de voc√™s?"
        "cardapio": "6",      # "Quais produtos est√£o dispon√≠veis e como selecionar?"
        "duvida_ia": None,    # Esta √© uma a√ß√£o, n√£o uma FAQ direta. A resposta √© dada abaixo.
        "falar_com_alguem": "54" # "N√£o encontrei minha d√∫vida. Como posso ser atendido?"
    }

    faq_id_from_button = mapping.get(callback_data)

    if faq_id_from_button:
        entry = FAQ_DATA.get(faq_id_from_button)
        if entry:
            response_text = entry["resposta"]
            # Condi√ß√£o especial para o bot√£o "Falar com Algu√©m" (ID 54)
            if faq_id_from_button == "54": 
                reply_markup = InlineKeyboardMarkup([
                    [InlineKeyboardButton("üìû Ligar para a Loja", url="tel:+556139717502")],
                    [InlineKeyboardButton("üí¨ Abrir Chat", url="https://wa.me/556139717502")]
                ])
        else:
            response_text = f"Erro: FAQ ID '{faq_id_from_button}' n√£o encontrado para a op√ß√£o '{callback_data}'. Verifique o faq_data.json."
    elif callback_data == "duvida_ia":
        response_text = "Estou pronto para tirar suas d√∫vidas! Digite sua pergunta agora e tentarei responder com base nas minhas informa√ß√µes. Se precisar de algo que n√£o sei, use a op√ß√£o 'Falar com algu√©m'."
    else:
        # Caso o callback_data seja diretamente um ID de FAQ (dos bot√µes din√¢micos de handle_message)
        entry = FAQ_DATA.get(callback_data) 
        if entry:
            response_text = entry["resposta"]
            # Condi√ß√£o especial para a FAQ de "Falar com Algu√©m" se for acionada dinamicamente
            if callback_data == "54": 
                reply_markup = InlineKeyboardMarkup([
                    [InlineKeyboardButton("üìû Ligar para a Loja", url="tel:+556139717502")],
                    [InlineKeyboardButton("üí¨ Abrir Chat", url="https://wa.me/556139717502")]
                ])
        else:
            response_text = f"Op√ß√£o de callback '{callback_data}' n√£o reconhecida ou FAQ ID n√£o encontrado. Verifique os dados."

    # ENVIAR NOVA MENSAGEM AO INV√âS DE EDITAR A ANTERIOR
    await context.bot.send_message(chat_id=query.message.chat_id, text=response_text, reply_markup=reply_markup)
    
    # Opcional: Se quiser que a mensagem original com os bot√µes seja deletada, descomente a linha abaixo:
    # await query.message.delete()

def main():
    TOKEN = os.environ.get('BOT_TOKEN')
    WEBHOOK_URL = os.environ.get('WEBHOOK_URL')
    PORT = int(os.environ.get('PORT', '5000'))

    application = Application.builder().token(TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_message))
    application.add_handler(CallbackQueryHandler(handle_callback_query))

    app = Flask(__name__)

    @app.route(f'/{TOKEN}', methods=['POST'])
    async def webhook_handler():
        json_data = await request.get_json(force=True)
        update = Update.de_json(json_data, application.bot)
        await application.process_update(update)
        return 'ok'

    return app

# --- LINHA NECESS√ÅRIA PARA O DEPLOY NO RENDER ---
app = main()

# As linhas abaixo s√£o para execu√ß√£o local e devem permanecer comentadas para o Render.
# if __name__ == '__main__':
#     from dotenv import load_dotenv
#     load_dotenv()
#     app.run(port=os.environ.get('PORT', 5000))
