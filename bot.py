import os
from flask import Flask, request, abort, jsonify
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
)
import google.generativeai as genai
import logging
import asyncio

# --- Monkey Patching para Gevent e Asyncio ---
# Esta linha DEVE vir antes de qualquer outra importa√ß√£o que possa
# ser afetada pelo monkey patching (como 'requests', 'httpx', 'asyncio').
# Coloc√°-la logo ap√≥s as importa√ß√µes b√°sicas e antes do logging/outras importa√ß√µes
# garante que tudo seja "patchado" corretamente para funcionar com gevent.
from gevent import monkey
monkey.patch_all()
# --- Fim do Monkey Patching ---

# --- Configura√ß√£o de Logging (Mantenha este bloco no topo) ---
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)
# --- Fim da Configura√ß√£o de Logging ---

# A importa√ß√£o abaixo assume que faq_data.py est√° dentro da pasta base_conhecimento/
from base_conhecimento.faq_data import faq_data

# --- Vari√°veis de Ambiente ---
TELEGRAM_BOT_TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")
GEMINI_API_KEY = os.environ.get("GEMINI_API_KEY")

if not TELEGRAM_BOT_TOKEN:
    logger.critical("TELEGRAM_BOT_TOKEN n√£o encontrado nas vari√°veis de ambiente! O bot n√£o pode iniciar.")
if not GEMINI_API_KEY:
    logger.critical("GEMINI_API_KEY n√£o encontrado nas vari√°veis de ambiente! A IA n√£o funcionar√°.")

# Configura a API Gemini
genai.configure(api_key=GEMINI_API_KEY)
model = genai.GenerativeModel('gemini-pro')

# Dicion√°rio para armazenar o hist√≥rico de conversa do Gemini
conversations = {}

# --- Fun√ß√µes do Bot ---

async def start(update: Update, context):
    user_id = update.effective_user.id
    user_name = update.effective_user.first_name
    logger.info(f"Comando /start recebido de {user_name} (ID: {user_id})")

    # Inicia uma nova conversa Gemini para o usu√°rio
    if user_id not in conversations:
        conversations[user_id] = model.start_chat(history=[])
    else:
        # Reinicia a conversa se o usu√°rio j√° tinha uma (opcional, pode ser mantido o hist√≥rico)
        conversations[user_id] = model.start_chat(history=[])


    welcome_message = (
        "Fala, mestre! üç∫ Bem-vindo √† Loja CHOPP! O gar√ßom digital est√° aqui pra te ajudar. "
        "O que manda hoje?!\n\n"
        "üç∫ - Onde fica a loja?\n"
        "üïí - Qual nosso hor√°rio?\n"
        "üìú - Quero ver o card√°pio!\n"
        "üß† - Tirar uma d√∫vida com a IA!\n\n"
        "√â s√≥ pedir que eu trago a informa√ß√£o geladinha!"
    )
    await update.message.reply_text(welcome_message)

async def handle_message(update: Update, context):
    user_text = update.message.text.lower()
    user_id = update.effective_user.id
    user_name = update.effective_user.first_name
    logger.info(f"Mensagem recebida de {user_name} (ID: {user_id}): {user_text}")

    # Verifica se o usu√°rio quer usar a IA
    if "tirar uma d√∫vida com a ia" in user_text:
        await update.message.reply_text(
            "Certo! Estou ativando minha mente para suas perguntas. Pode mandar sua d√∫vida para a IA!"
        )
        context.user_data['using_ai'] = True
        
        # Opcional: Remova o teclado de FAQ se estiver presente e o usu√°rio mudar para o modo IA
        if update.message.reply_markup and isinstance(update.message.reply_markup, InlineKeyboardMarkup):
            try:
                # Tenta editar a mensagem anterior do bot para remover os bot√µes
                # ou edita a pr√≥pria mensagem do usu√°rio se for a √∫ltima do bot
                # Nota: edit_reply_markup s√≥ funciona se a mensagem foi enviada pelo bot.
                # Como essa √© uma nova mensagem do usu√°rio, n√£o h√° mensagem do bot para editar,
                # ent√£o essa parte √© mais para cen√°rios onde o bot enviou os bot√µes por √∫ltimo.
                pass # N√£o fazemos nada aqui, a nova mensagem j√° "esconde" os bot√µes
            except Exception as e:
                logger.warning(f"N√£o foi poss√≠vel remover o teclado inline ao ativar IA: {e}")
        return

    # Se o usu√°rio est√° no modo IA
    if context.user_data.get('using_ai', False):
        await send_to_gemini(update, context)
        return

    # L√≥gica de FAQ
    saudacoes = ["ol√°", "ola", "oi", "bom dia", "boa tarde", "boa noite", "e a√≠"]
    if any(saudacao in user_text for saudacao in saudacoes):
        await start(update, context)
        logger.info(f"Sauda√ß√£o detectada: '{user_text}'. Enviando mensagem de boas-vindas.")
        return

    matched_faqs = []
    for item in faq_data:
        if any(keyword in user_text for keyword in item["palavras_chave"]):
            matched_faqs.append(item)

    if not matched_faqs:
        await update.message.reply_text("Desculpe, n√£o entendi. Posso te ajudar com o card√°pio, hor√°rios ou localiza√ß√£o?")
        logger.info(f"Nenhuma FAQ encontrada para: {user_text}")
    elif len(matched_faqs) == 1:
        await update.message.reply_text(matched_faqs[0]["resposta"])
        logger.info(f"Resposta direta da FAQ: {matched_faqs[0]['pergunta']}")
    else:
        keyboard = []
        for faq in matched_faqs:
            keyboard.append([InlineKeyboardButton(faq["pergunta"], callback_data=str(faq["id"]))])
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            "Encontrei algumas op√ß√µes. Qual delas voc√™ gostaria de saber?", reply_markup=reply_markup
        )
        logger.info(f"M√∫ltiplas FAQs encontradas. Oferecendo bot√µes para: {[f['pergunta'] for f in matched_faqs]}")

async def button_callback_handler(update: Update, context):
    query = update.callback_query
    await query.answer()
    selected_faq_id = query.data
    user_name = update.effective_user.first_name
    logger.info(f"Bot√£o de FAQ pressionado por {user_name}: ID {selected_faq_id}")

    for item in faq_data:
        if str(item["id"]) == selected_faq_id:
            await query.message.reply_text(text=item["resposta"])
            logger.info(f"Resposta da FAQ por bot√£o (nova mensagem): {item['pergunta']}")
            return
    logger.warning(f"ID de FAQ n√£o encontrado para callback_data: {selected_faq_id}")
    await query.message.reply_text(text="Desculpe, n√£o consegui encontrar a informa√ß√£o para essa op√ß√£o.")


async def send_to_gemini(update: Update, context):
    user_id = update.effective_user.id
    user_message = update.message.text
    user_name = update.effective_user.first_name
    logger.info(f"Enviando para Gemini de {user_name} (ID: {user_id}): {user_message}")

    if user_id not in conversations:
        logger.info(f"Iniciando nova conversa Gemini para o usu√°rio {user_id}")
        conversations[user_id] = model.start_chat(history=[])

    try:
        response = await conversations[user_id].send_message_async(user_message)
        gemini_response_text = response.text
        logger.info(f"Resposta do Gemini para {user_id}: {gemini_response_text}")
        await update.message.reply_text(gemini_response_text)
    except Exception as e:
        logger.error(f"Erro ao comunicar com a API Gemini para o usu√°rio {user_id}: {e}", exc_info=True)
        await update.message.reply_text("Desculpe, n√£o consegui processar sua pergunta com a IA no momento.")
    finally:
        # Desativa o modo IA ap√≥s a resposta do Gemini ou erro
        context.user_data['using_ai'] = False
        logger.info(f"Modo IA desativado para o usu√°rio {user_id}.")


async def unknown(update: Update, context):
    logger.info(f"Comando desconhecido recebido: {update.message.text}")
    await update.message.reply_text("Desculpe, n√£o entendi esse comando. Tente `/start` para come√ßar.")

# --- Configura√ß√£o do Flask App ---
flask_app = Flask(__name__)

# Vari√°vel global para a aplica√ß√£o do Telegram (ser√° inicializada uma vez por processo Gunicorn worker)
application_instance = None

async def get_telegram_application():
    """Retorna ou cria uma inst√¢ncia da aplica√ß√£o do Telegram Bot."""
    global application_instance
    if application_instance is None:
        if not TELEGRAM_BOT_TOKEN:
            logger.critical("TELEGRAM_BOT_TOKEN n√£o est√° definido. N√£o √© poss√≠vel criar a aplica√ß√£o do Telegram.")
            raise ValueError("TELEGRAM_BOT_TOKEN not set.")

        application_instance = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

        # Adicionando Handlers
        application_instance.add_handler(CommandHandler("start", start))
        application_instance.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        application_instance.add_handler(CallbackQueryHandler(button_callback_handler))
        application_instance.add_handler(MessageHandler(filters.COMMAND, unknown))

        await application_instance.initialize()
        webhook_url = os.environ.get("RENDER_EXTERNAL_HOSTNAME")
        if webhook_url:
            full_webhook_url = f"https://{webhook_url}/api/telegram/webhook"
            await application_instance.bot.set_webhook(url=full_webhook_url)
            logger.info(f"Webhook definido para: {full_webhook_url}")
        else:
            logger.warning("RENDER_EXTERNAL_HOSTNAME n√£o definido. Webhook n√£o ser√° configurado automaticamente.")
        logger.info("Nova inst√¢ncia do Bot Telegram configurada.")
    return application_instance

@flask_app.route('/api/telegram/webhook', methods=['POST'])
async def webhook_handler():
    logger.info("Webhook endpoint hit! (Recebendo requisi√ß√£o do Telegram)")
    if request.method == "POST":
        try:
            # Obt√©m a inst√¢ncia da aplica√ß√£o do Telegram.
            # Isso garante que cada worker do Gunicorn tenha sua pr√≥pria inst√¢ncia
            # ou que a mesma inst√¢ncia seja reutilizada se j√° estiver configurada.
            application = await get_telegram_application()

            update = Update.de_json(request.get_json(force=True), application.bot)
            await application.process_update(update)
            logger.debug(f"Update processado com sucesso para update_id: {update.update_id}")
            return jsonify({"status": "ok"}), 200
        except Exception as e:
            logger.error(f"Erro ao processar atualiza√ß√£o do webhook: {e}", exc_info=True)
            return jsonify({"status": "error", "message": str(e)}), 500
    else:
        logger.warning(f"Requisi√ß√£o webhook com m√©todo HTTP inesperado: {request.method}")
        abort(400)

# --- Rota de Health Check ---
@flask_app.route('/health', methods=['GET'])
def health_check():
    logger.info("Rota /health acessada.")
    return "OK", 200

# Este bloco n√£o √© mais necess√°rio para inicializar a aplica√ß√£o globalmente
# fora da rota do webhook, pois get_telegram_application() far√° isso on-demand.
# O Gunicorn vai carregar o flask_app, e a primeira requisi√ß√£o vai configurar o bot.
# A √∫nica coisa que podemos fazer aqui √© um logging para garantir que o TELEGRAM_BOT_TOKEN exista.
if not TELEGRAM_BOT_TOKEN:
    logger.critical("TELEGRAM_BOT_TOKEN n√£o encontrado nas vari√°veis de ambiente! O bot n√£o pode iniciar corretamente.")

# O `if __name__ == '__main__'` n√£o √© estritamente necess√°rio para o Render/Gunicorn
# mas pode ser √∫til para testes locais.
if __name__ == '__main__':
    # Para testar localmente, voc√™ pode querer adicionar:
    # Este bloco executaria o Flask em modo de desenvolvimento.
    # Em produ√ß√£o com Gunicorn, este bloco n√£o ser√° executado.
    logger.info("Executando Flask localmente. Isso n√£o acontece no Render com Gunicorn.")
    # No entanto, a inicializa√ß√£o ass√≠ncrona requer um loop de eventos.
    # asyncio.run(get_telegram_application()) # Para configurar o webhook uma vez
    # flask_app.run(debug=True, port=5000)
    pass
