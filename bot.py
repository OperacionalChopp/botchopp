import os
from flask import Flask, request, abort, jsonify
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
)
import google.generativeai as genai
import logging
import asyncio

# --- Monkey Patching para Gevent e Asyncio ---
# Esta linha DEVE vir antes de qualquer outra importa√ß√£o que possa
# ser afetada pelo monkey patching (como 'requests', 'httpx', 'asyncio').
# Coloc√°-la logo ap√≥s as importa√ß√µes b√°sicas e antes do logging/outras importa√ß√µes
# garante que tudo seja "patchado" corretamente para funcionar com gevent.
from gevent import monkey
monkey.patch_all()
# --- Fim do Monkey Patching ---

# --- Configura√ß√£o de Logging (Mantenha este bloco no topo) ---
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)
# --- Fim da Configura√ß√£o de Logging ---

# A importa√ß√£o abaixo assume que faq_data.py est√° dentro da pasta base_conhecimento/
# Certifique-se de que faq_data.py est√° realmente l√° e que voc√™ removeu a vers√£o da raiz.
from base_conhecimento.faq_data import faq_data

# --- Vari√°veis de Ambiente ---
# Renomeie as vari√°veis no Render para TELEGRAM_BOT_TOKEN e GEMINI_API_KEY
TELEGRAM_BOT_TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")
GEMINI_API_KEY = os.environ.get("GEMINI_API_KEY")

if not TELEGRAM_BOT_TOKEN:
    logger.critical("TELEGRAM_BOT_TOKEN n√£o encontrado nas vari√°veis de ambiente! O bot n√£o pode iniciar.")
    # N√£o levante erro fatal aqui, deixe o try-except principal lidar com isso
if not GEMINI_API_KEY:
    logger.critical("GEMINI_API_KEY n√£o encontrado nas vari√°veis de ambiente! A IA n√£o funcionar√°.")

# Configura a API Gemini
genai.configure(api_key=GEMINI_API_KEY)
model = genai.GenerativeModel('gemini-pro')

# Dicion√°rio para armazenar o hist√≥rico de conversa do Gemini
conversations = {}

# --- Fun√ß√µes do Bot ---

async def start(update: Update, context):
    user_id = update.effective_user.id
    user_name = update.effective_user.first_name
    logger.info(f"Comando /start recebido de {user_name} (ID: {user_id})")

    # Inicia uma nova conversa Gemini para o usu√°rio
    conversations[user_id] = model.start_chat(history=[])

    welcome_message = (
        "Fala, mestre! üç∫ Bem-vindo √† Loja CHOPP! O gar√ßom digital est√° aqui pra te ajudar. "
        "O que manda hoje?!\n\n"
        "üç∫ - Onde fica a loja?\n"
        "üïí - Qual nosso hor√°rio?\n"
        "üìú - Quero ver o card√°pio!\n"
        "üß† - Tirar uma d√∫vida com a IA!\n\n"
        "√â s√≥ pedir que eu trago a informa√ß√£o geladinha!"
    )
    await update.message.reply_text(welcome_message)

async def handle_message(update: Update, context):
    user_text = update.message.text.lower()
    user_id = update.effective_user.id
    user_name = update.effective_user.first_name
    logger.info(f"Mensagem recebida de {user_name} (ID: {user_id}): {user_text}")

    # Verifica se o usu√°rio quer usar a IA
    if "tirar uma d√∫vida com a ia" in user_text:
        await update.message.reply_text(
            "Certo! Estou ativando minha mente para suas perguntas. Pode mandar sua d√∫vida para a IA!"
        )
        context.user_data['using_ai'] = True
        
        # Opcional: Remova o teclado de FAQ se estiver presente e o usu√°rio mudar para o modo IA
        # Isso evita que os bot√µes de FAQ fiquem poluindo a tela quando a intera√ß√£o for com a IA
        if update.message.reply_markup and isinstance(update.message.reply_markup, InlineKeyboardMarkup):
            try:
                # Tenta editar a mensagem anterior do bot para remover os bot√µes
                # ou edita a pr√≥pria mensagem do usu√°rio se for a √∫ltima do bot
                await update.message.edit_reply_markup(reply_markup=None) 
                # Nota: edit_reply_markup s√≥ funciona se a mensagem foi enviada pelo bot.
                # Se for a mensagem do usu√°rio, voc√™ pode ter que editar a √∫ltima mensagem do bot
                # que continha os bot√µes, se tiver o ID dela. Para simplificar,
                # a nova mensagem acima j√° "empurra" a antiga para cima.
            except Exception as e:
                logger.warning(f"N√£o foi poss√≠vel remover o teclado inline ao ativar IA: {e}")
        return

    # Se o usu√°rio est√° no modo IA
    if context.user_data.get('using_ai', False):
        await send_to_gemini(update, context)
        return

    # L√≥gica de FAQ
    # Adicionando tratamento para sauda√ß√µes b√°sicas que devem ativar o /start ou uma sauda√ß√£o simples
    saudacoes = ["ol√°", "ola", "oi", "bom dia", "boa tarde", "boa noite", "e a√≠"]
    if any(saudacao in user_text for saudacao in saudacoes):
        await start(update, context) # Chama a fun√ß√£o start para enviar a mensagem de boas-vindas
        logger.info(f"Sauda√ß√£o detectada: '{user_text}'. Enviando mensagem de boas-vindas.")
        return

    matched_faqs = []
    for item in faq_data:
        if any(keyword in user_text for keyword in item["palavras_chave"]):
            matched_faqs.append(item)

    if not matched_faqs:
        await update.message.reply_text("Desculpe, n√£o entendi. Posso te ajudar com o card√°pio, hor√°rios ou localiza√ß√£o?")
        logger.info(f"Nenhuma FAQ encontrada para: {user_text}")
    elif len(matched_faqs) == 1:
        await update.message.reply_text(matched_faqs[0]["resposta"])
        logger.info(f"Resposta direta da FAQ: {matched_faqs[0]['pergunta']}")
    else:
        keyboard = []
        for faq in matched_faqs:
            # Use 'pergunta' como texto do bot√£o e 'id' como callback_data
            keyboard.append([InlineKeyboardButton(faq["pergunta"], callback_data=str(faq["id"]))])
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            "Encontrei algumas op√ß√µes. Qual delas voc√™ gostaria de saber?", reply_markup=reply_markup
        )
        logger.info(f"M√∫ltiplas FAQs encontradas. Oferecendo bot√µes para: {[f['pergunta'] for f in matched_faqs]}")

async def button_callback_handler(update: Update, context):
    query = update.callback_query
    await query.answer() # Importante para parar o loading no bot√£o
    selected_faq_id = query.data
    user_name = update.effective_user.first_name
    logger.info(f"Bot√£o de FAQ pressionado por {user_name}: ID {selected_faq_id}")

    for item in faq_data:
        if str(item["id"]) == selected_faq_id:
            # === ALTERA√á√ÉO AQUI: USAR reply_text EM VEZ DE edit_message_text ===
            # Isso far√° com que a resposta apare√ßa como uma NOVA mensagem,
            # deixando os bot√µes originais intactos.
            await query.message.reply_text(text=item["resposta"])
            logger.info(f"Resposta da FAQ por bot√£o (nova mensagem): {item['pergunta']}")
            return
    logger.warning(f"ID de FAQ n√£o encontrado para callback_data: {selected_faq_id}")
    # Se o ID n√£o for encontrado, ainda podemos editar a mensagem de "op√ß√µes"
    # para indicar o erro, mas manter os bot√µes se houver outros.
    await query.message.reply_text(text="Desculpe, n√£o consegui encontrar a informa√ß√£o para essa op√ß√£o.")


async def send_to_gemini(update: Update, context):
    user_id = update.effective_user.id
    user_message = update.message.text
    user_name = update.effective_user.first_name
    logger.info(f"Enviando para Gemini de {user_name} (ID: {user_id}): {user_message}")

    if user_id not in conversations:
        logger.info(f"Iniciando nova conversa Gemini para o usu√°rio {user_id}")
        conversations[user_id] = model.start_chat(history=[])

    try:
        response = await conversations[user_id].send_message_async(user_message)
        gemini_response_text = response.text
        logger.info(f"Resposta do Gemini para {user_id}: {gemini_response_text}")
        await update.message.reply_text(gemini_response_text)
    except Exception as e:
        logger.error(f"Erro ao comunicar com a API Gemini para o usu√°rio {user_id}: {e}", exc_info=True)
        await update.message.reply_text("Desculpe, n√£o consegui processar sua pergunta com a IA no momento.")
    finally:
        # Desativa o modo IA ap√≥s a resposta do Gemini ou erro
        # Se voc√™ quer que o usu√°rio continue no modo IA para v√°rias perguntas,
        # remova ou comente a linha abaixo.
        context.user_data['using_ai'] = False
        logger.info(f"Modo IA desativado para o usu√°rio {user_id}.")


async def unknown(update: Update, context):
    logger.info(f"Comando desconhecido recebido: {update.message.text}")
    await update.message.reply_text("Desculpe, n√£o entendi esse comando. Tente `/start` para come√ßar.")

# --- Configura√ß√£o do Flask App ---
flask_app = Flask(__name__)

# Vari√°vel global para a aplica√ß√£o do Telegram (ser√° inicializada)
application = None

async def setup_bot():
    """Fun√ß√£o para configurar a aplica√ß√£o do Telegram bot."""
    global application
    if not TELEGRAM_BOT_TOKEN:
        raise ValueError("TELEGRAM_BOT_TOKEN n√£o est√° definido nas vari√°veis de ambiente. O bot n√£o pode ser iniciado.")

    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    # Adicionando Handlers
    application.add_handler(CommandHandler("start", start))
    # Handler para sauda√ß√µes e texto livre que n√£o s√£o comandos
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(CallbackQueryHandler(button_callback_handler))
    application.add_handler(MessageHandler(filters.COMMAND, unknown)) # Para comandos n√£o reconhecidos

    # Inicializa a aplica√ß√£o para processamento de webhook
    await application.initialize()
    # Adiciona o webhook explicitamente.
    # Certifique-se de que a URL do seu Render esteja configurada para /api/telegram/webhook
    webhook_url = os.environ.get("RENDER_EXTERNAL_HOSTNAME")
    if webhook_url:
        full_webhook_url = f"https://{webhook_url}/api/telegram/webhook"
        await application.bot.set_webhook(url=full_webhook_url)
        logger.info(f"Webhook definido para: {full_webhook_url}")
    else:
        logger.warning("RENDER_EXTERNAL_HOSTNAME n√£o definido. Webhook n√£o ser√° configurado automaticamente.")


@flask_app.route('/api/telegram/webhook', methods=['POST'])
async def webhook_handler():
    logger.info("Webhook endpoint hit! (Recebendo requisi√ß√£o do Telegram)")
    if request.method == "POST":
        global application # Garante que estamos usando a vari√°vel global
        if application is None: # Verifica se a aplica√ß√£o foi criada (deve ter sido no setup_bot())
            logger.error("A aplica√ß√£o do Telegram n√£o est√° inicializada. Tentando configurar novamente.")
            try:
                await setup_bot() # Tenta configurar se n√£o estiver inicializada
                logger.info("Aplica√ß√£o Telegram re-inicializada no webhook.")
            except Exception as e:
                logger.critical(f"Falha ao configurar o bot no webhook: {e}", exc_info=True)
                return jsonify({"status": "error", "message": "Bot initialization failed"}), 500

        try:
            update = Update.de_json(request.get_json(force=True), application.bot)
            await application.process_update(update)
            logger.debug(f"Update processado com sucesso para update_id: {update.update_id}")
            return jsonify({"status": "ok"}), 200
        except Exception as e:
            logger.error(f"Erro ao processar atualiza√ß√£o do webhook: {e}", exc_info=True)
            return jsonify({"status": "error", "message": str(e)}), 500
    else:
        logger.warning(f"Requisi√ß√£o webhook com m√©todo HTTP inesperado: {request.method}")
        abort(400)

# --- Rota de Health Check ---
@flask_app.route('/health', methods=['GET'])
def health_check():
    logger.info("Rota /health acessada.")
    return "OK", 200

# Bloco de inicializa√ß√£o principal para o Gunicorn
# Isso ser√° executado quando o m√≥dulo for importado pelo Gunicorn
try:
    # Cria um novo loop de eventos e executa setup_bot()
    # Isso garante que setup_bot() seja chamado uma vez quando o Gunicorn carrega o app.
    # √â importante usar um novo loop aqui para evitar conflitos se houver um loop existente.
    loop = asyncio.get_event_loop()
    if loop.is_running():
        # Se um loop j√° estiver rodando (ex: em ambientes de teste ou IDEs),
        # agendamos a tarefa. No Gunicorn/Render, isso n√£o deve ser um problema.
        loop.create_task(setup_bot())
        logger.info("Agendando setup_bot para o loop de eventos existente.")
    else:
        loop.run_until_complete(setup_bot())
        logger.info("Bot Telegram configurado na inicializa√ß√£o do m√≥dulo (novo loop).")
except RuntimeError as e:
    # Catch the "Event loop is already running" in specific scenarios,
    # and just log it, assuming it will be handled by the webhook.
    if "Event loop is already running" in str(e):
        logger.warning("RuntimeError: Event loop is already running. "
                       "Bot setup will likely occur on the first webhook request.")
    else:
        logger.critical(f"ERRO FATAL NA CONFIGURA√á√ÉO INICIAL DO BOT: {e}", exc_info=True)
        raise # Re-raise para que o Render saiba que a inicializa√ß√£o falhou
except Exception as e:
    logger.critical(f"ERRO FATAL NA CONFIGURA√á√ÉO INICIAL DO BOT: {e}", exc_info=True)
    raise # Re-raise para que o Render saiba que a inicializa√ß√£o falhou

# O `if __name__ == '__main__'` n√£o √© estritamente necess√°rio para o Render/Gunicorn
# mas pode ser √∫til para testes locais.
if __name__ == '__main__':
    # Esta parte √© mais para execu√ß√£o local (python bot.py)
    # No Render, o Gunicorn executa o `flask_app` diretamente.
    # A inicializa√ß√£o do bot j√° foi feita fora deste bloco `if __name__ == '__main__'`
    # para garantir que ocorra quando o Gunicorn carrega o m√≥dulo.
    # Para testar localmente, voc√™ pode querer adicionar:
    # flask_app.run(debug=True, port=5000)
    pass
