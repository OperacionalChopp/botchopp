# bot.py (VERS√ÉO CORRIGIDA - PARA python-telegram-bot 20.0+ E INTEGRA√á√ÉO FAQ)

import os
import json # Importar para ler o JSON
from flask import Flask, request
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup # Importa√ß√µes atualizadas para bot√µes
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackQueryHandler

# --- Carregar dados do FAQ ---
# Aconselh√°vel carregar os dados uma vez ao iniciar a aplica√ß√£o
# E torn√°-los acess√≠veis aos handlers.
FAQ_DATA = {}
try:
    with open('faq_data.json', 'r', encoding='utf-8') as f:
        FAQ_DATA = json.load(f)
except FileNotFoundError:
    print("ERRO: faq_data.json n√£o encontrado. Certifique-se de que o arquivo est√° na raiz do projeto.")
    # Adicionar um fallback ou tratamento de erro adequado
except json.JSONDecodeError:
    print("ERRO: faq_data.json com formato JSON inv√°lido.")
    # Adicionar um fallback ou tratamento de erro adequado

# --- Seus handlers (comandos e mensagens) ---

async def start(update: Update, context):
    """Envia a mensagem de boas-vindas com bot√µes."""
    welcome_entry = FAQ_DATA.get("1")
    if welcome_entry:
        introduction_message = welcome_entry["resposta"]

        # Criar os bot√µes conforme as sugest√µes na mensagem de boas-vindas
        # e adicionando a op√ß√£o de "Falar com algu√©m" da FAQ ID 4.
        # Os callback_data s√£o chaves para identificar qual bot√£o foi clicado.
        keyboard = [
            [InlineKeyboardButton("üìç Onde fica a loja?", callback_data="onde_fica")],
            [InlineKeyboardButton("üïí Qual nosso hor√°rio?", callback_data="horario")],
            [InlineKeyboardButton("üçî Quero ver o card√°pio", callback_data="cardapio")],
            [InlineKeyboardButton("üß† Tirar uma d√∫vida com a IA", callback_data="duvida_ia")],
            [InlineKeyboardButton("üìû Falar com algu√©m", callback_data="falar_com_alguem")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(introduction_message, reply_markup=reply_markup)
    else:
        # Mensagem de fallback se a FAQ de boas-vindas n√£o for encontrada
        await update.message.reply_text('Ol√°! Eu sou seu bot! Parece que a mensagem de boas-vindas n√£o foi carregada corretamente. Por favor, verifique o arquivo FAQ.')

async def handle_message(update: Update, context):
    """Processa mensagens de texto (n√£o comandos) e tenta encontrar respostas no FAQ."""
    user_text = update.message.text.lower()
    response_text = "Desculpe, n√£o entendi sua pergunta. Por favor, tente reformular ou use os bot√µes abaixo para explorar as op√ß√µes."
    reply_markup = None # Inicializa o markup como None

    # Tenta encontrar uma resposta baseada nas palavras-chave do FAQ
    for faq_id, entry in FAQ_DATA.items():
        # Ignora a FAQ de boas-vindas (ID 1) para busca de palavras-chave, pois ela √© para o comando /start
        if faq_id == "1":
            continue
        
        # Verifica se alguma palavra-chave da FAQ est√° contida na mensagem do usu√°rio
        # Convertemos todas as palavras-chave para min√∫sculas para compara√ß√£o
        found_keywords = [
            kw for kw in entry.get("palavras_chave", []) if kw.lower() in user_text
        ]
        
        if found_keywords:
            response_text = entry["resposta"]
            
            # Se a resposta for o FAQ de "Falar com algu√©m" (ID 4), adiciona bot√µes espec√≠ficos
            if faq_id == "4":
                reply_markup = InlineKeyboardMarkup([
                    [InlineKeyboardButton("üìû Ligar para a Loja", url="tel:+5511987654321")], # SUBSTITUA PELO N√öMERO DE TELEFONE REAL DA LOJA
                    [InlineKeyboardButton("üí¨ Abrir Chat", url="https://wa.me/5511987654321")] # SUBSTITUA PELO N√öMERO DE WHATSAPP REAL DA LOJA
                ])
            break # Encontrou uma resposta, sai do loop de busca

    await update.message.reply_text(response_text, reply_markup=reply_markup)

async def handle_callback_query(update: Update, context):
    """Processa cliques nos bot√µes inline (InlineKeyboardButtons)."""
    query = update.callback_query
    await query.answer() # Responde ao callback para que o Telegram saiba que o clique foi processado

    callback_data = query.data
    response_text = "Op√ß√£o n√£o reconhecida ou em desenvolvimento."
    reply_markup = None

    # L√≥gica para cada callback_data dos bot√µes do start
    if callback_data == "onde_fica":
        # Busca no FAQ a pergunta que corresponde √† localiza√ß√£o
        location_entry = None
        for faq_id, entry in FAQ_DATA.items():
            # Crit√©rio de busca: pergunta que contenha "onde fica" ou "localiza√ß√£o"
            if "onde fica" in entry["pergunta"].lower() or "localiza√ß√£o" in entry["pergunta"].lower():
                location_entry = entry
                break
        if location_entry:
            response_text = location_entry["resposta"]
        else:
            response_text = "Informa√ß√£o de localiza√ß√£o n√£o encontrada no FAQ. Por favor, verifique o arquivo FAQ."
    
    elif callback_data == "horario":
        # Busca no FAQ a pergunta que corresponde ao hor√°rio
        hours_entry = None
        for faq_id, entry in FAQ_DATA.items():
            # Crit√©rio de busca: pergunta que contenha "hor√°rio" ou "abre"
            if "hor√°rio" in entry["pergunta"].lower() or "abre" in entry["pergunta"].lower():
                hours_entry = entry
                break
        if hours_entry:
            response_text = hours_entry["resposta"]
        else:
            response_text = "Informa√ß√£o de hor√°rio n√£o encontrada no FAQ. Por favor, verifique o arquivo FAQ."

    elif callback_data == "cardapio":
        # Busca no FAQ a pergunta que corresponde ao card√°pio
        menu_entry = None
        for faq_id, entry in FAQ_DATA.items():
            # Crit√©rio de busca: pergunta que contenha "card√°pio" ou "menu"
            if "card√°pio" in entry["pergunta"].lower() or "menu" in entry["pergunta"].lower():
                menu_entry = entry
                break
        if menu_entry:
            response_text = menu_entry["resposta"]
        else:
            response_text = "Informa√ß√£o de card√°pio n√£o encontrada no FAQ. Por favor, verifique o arquivo FAQ."

    elif callback_data == "duvida_ia":
        response_text = "Estou pronto para tirar suas d√∫vidas! Digite sua pergunta agora e tentarei responder com base nas minhas informa√ß√µes. Se precisar de algo que n√£o sei, use a op√ß√£o 'Falar com algu√©m'."
        # Futuramente, esta parte poderia ser integrada com uma API de IA generativa (ex: Google Gemini, OpenAI GPT)
    
    elif callback_data == "falar_com_alguem":
        # Usa o FAQ ID 4 para a resposta e os bot√µes espec√≠ficos de contato
        contact_entry = FAQ_DATA.get("4")
        if contact_entry:
            response_text = contact_entry["resposta"]
            reply_markup = InlineKeyboardMarkup([
                [InlineKeyboardButton("üìû Ligar para a Loja", url="tel:+5511987654321")], # SUBSTITUA PELO N√öMERO DE TELEFONE REAL DA LOJA
                [InlineKeyboardButton("üí¨ Abrir Chat", url="https://wa.me/5511987654321")] # SUBSTITUA PELO N√öMERO DE WHATSAPP REAL DA LOJA
            ])
        else:
            response_text = "Op√ß√£o de contato 'Falar com algu√©m' n√£o encontrada no FAQ. Por favor, verifique o arquivo FAQ."
    
    # Envia a resposta de volta ao usu√°rio, editando a mensagem original do bot√£o
    await query.edit_message_text(text=response_text, reply_markup=reply_markup)


# Sua fun√ß√£o principal do bot que retorna a aplica√ß√£o Flask
def main():
    TOKEN = os.environ.get('BOT_TOKEN')
    WEBHOOK_URL = os.environ.get('WEBHOOK_URL')
    PORT = int(os.environ.get('PORT', '5000')) # Definindo a porta

    # 1. Cria a Application
    application = Application.builder().token(TOKEN).build()

    # 2. Adiciona os handlers √† Application
    application.add_handler(CommandHandler("start", start))
    # Handler para mensagens de texto que n√£o s√£o comandos
    application.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_message))
    # Handler para cliques em bot√µes inline
    application.add_handler(CallbackQueryHandler(handle_callback_query))

    # 3. Configura o webhook do Flask
    app = Flask(__name__)

    @app.route(f'/{TOKEN}', methods=['POST'])
    async def webhook_handler():
        """Processa as atualiza√ß√µes do Telegram via webhook."""
        # A atualiza√ß√£o vem como JSON do Telegram
        json_data = await request.get_json(force=True)
        update = Update.de_json(json_data, application.bot)

        # Processa a atualiza√ß√£o com a Application
        await application.process_update(update)
        return 'ok'

    return app

# Para gunicorn rodar o Flask, ele precisa de uma vari√°vel 'app' global
# Ent√£o, chamamos a fun√ß√£o principal para obter a inst√¢ncia da aplica√ß√£o Flask
app = main()
