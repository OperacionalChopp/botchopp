import logging
import os
import asyncio
import json
import threading
from flask import Flask, request, jsonify
from telegram import Update, Bot, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, MessageHandler, filters, CallbackQueryHandler, CommandHandler
# Importar o ApplicationBuilder diretamente para melhor legibilidade
from telegram.ext.application import ApplicationBuilder

# Para a fila com Redis
import redis
from rq import Queue, Worker
from rq.job import Job

# --- Configura√ß√£o de Logging ---
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- Vari√°veis de Ambiente e Configura√ß√µes ---
TELEGRAM_BOT_TOKEN = os.getenv("BOT_TOKEN")
# REDIS_URL ser√° automaticamente preenchido pelo Render. Fallback para desenvolvimento local.
REDIS_URL = os.getenv("REDIS_URL", "redis://localhost:6379/0")

# Verifica√ß√£o para garantir que o token foi carregado
if not TELEGRAM_BOT_TOKEN:
    logger.critical("ERRO CR√çTICO: A vari√°vel de ambiente 'BOT_TOKEN' n√£o foi encontrada. Certifique-se de que est√° configurada no Render.")
    # Em um ambiente de produ√ß√£o, voc√™ pode querer parar a execu√ß√£o se o token for essencial.
    # raise ValueError("BOT_TOKEN n√£o configurado. Imposs√≠vel prosseguir.")

# Constru√ß√£o da URL do Webhook
RENDER_EXTERNAL_HOSTNAME = os.getenv("RENDER_EXTERNAL_HOSTNAME")
if RENDER_EXTERNAL_HOSTNAME:
    WEBHOOK_URL = f"https://{RENDER_EXTERNAL_HOSTNAME}/api/telegram/webhook"
else:
    # Fallback para desenvolvimento local ou ambiente sem RENDER_EXTERNAL_HOSTNAME
    # Certifique-se de que esta URL seja acess√≠vel externamente se for para produ√ß√£o
    WEBHOOK_URL = "https://botchopp.onrender.com/api/telegram/webhook"
    logger.warning(f"RENDER_EXTERNAL_HOSTNAME n√£o encontrado. Usando fallback WEBHOOK_URL: {WEBHOOK_URL}")

# --- Conex√£o ao Redis e Configura√ß√£o da Fila RQ ---
redis_conn = None
q = None
try:
    redis_conn = redis.from_url(REDIS_URL)
    # Teste de conex√£o simples
    redis_conn.ping()
    q = Queue(connection=redis_conn)
    logger.info(f"Conectado ao Redis em: {REDIS_URL}")
except redis.exceptions.ConnectionError as e:
    logger.critical(f"ERRO CR√çTICO: N√£o foi poss√≠vel conectar ao Redis em {REDIS_URL}. Verifique a URL e a disponibilidade do servi√ßo Redis: {e}", exc_info=True)
    # Em caso de falha cr√≠tica na conex√£o ao Redis, o aplicativo pode n√£o funcionar corretamente.
    # √â importante logar isso e, possivelmente, sair se a fila for essencial.
except Exception as e:
    logger.critical(f"ERRO DESCONHECIDO ao conectar ao Redis: {e}", exc_info=True)


# --- Inst√¢ncia do Flask ---
flask_app = Flask(__name__)

# --- Dados do FAQ (mantido como est√°, supondo que √© completo) ---
faq_data = [
    {
        "id": 1,
        "pergunta": "Mensagem de boas-vindas",
        "resposta": "Bem-vindo ao nosso servi√ßo!",
        "palavras_chave": ["boas-vindas", "oi", "ol√°", "come√ßar"]
    },
    {
        "id": 2,
        "pergunta": "Como saber quantos litros de chope preciso para o meu evento?",
        "resposta": "Para estimar a quantidade de chopp, considere 1,5 a 2 litros por pessoa para eventos de 4 horas.",
        "palavras_chave": ["litros", "quantidade", "evento", "chope", "cerveja"]
    },
    {
        "id": 3,
        "pergunta": "Qual √© o hor√°rio de atendimento de voc√™s?",
        "resposta": "Nosso hor√°rio de atendimento √© de segunda a sexta, das 9h √†s 18h.",
        "palavras_chave": ["hor√°rio", "atendimento", "abertura", "funciona"]
    },
    {
        "id": 53,
        "pergunta": "Como funciona a coleta/recolha do equipamento (chopeira, barril)?",
        "resposta": (
            "‚ö†Ô∏è AVISO INFORMATIVO ‚Äî RECOLHA DO MATERIAL COMODATADO\n\n"
            "Este informativo orienta a coleta dos materiais (chopeira, barril, etc.) de acordo com a rota estabelecida durante o hor√°rio comercial.\n\n"
            "**CRIT√âRIO:**\n"
            "As coletas seguem uma rota definida pela empresa para atender o maior n√∫mero de clientes por regi√£o, podendo ser alterada semanalmente conforme a demanda.\n\n"
            "**HOR√ÅRIO DE COLETA | ROTA:**\n"
            "N√£o realizamos coleta agendada. As coletas ocorrem por per√≠odo:\n"
            "üïò Manh√£ / Tarde\n"
            "üìÜ Segunda √† Ter√ßa-feira ‚Äî das 9h √†s 18h\n\n"
            "**REGIME DE EXCE√á√ÉO (ALTA DEMANDA):**\n"
            "Conforme crit√©rio da empresa, a coleta pode se estender para:\n"
            "üìÜ Quarta-feira ‚Äî das 9h √†s 18h\n\n"
            "üö´ N√£o fazemos desvios de rota para atendimento personalizado.\n\n"
            "**COMUNICA√á√ÉO COM O CLIENTE:**\n"
            "- A empresa far√° contato durante a rota para garantir a presen√ßa de um respons√°vel.\n"
            "- Em caso de insucesso no contato, a rota ser√° reavaliada e reprogramada at√© quarta-feira.\n"
            "- Se houver imprevistos, o cliente deve entrar em contato com a loja para entender a rota.\n"
            "- Caso a rota n√£o atenda √† necessidade, o cliente deve providenciar um substituto para liberar o material.\n\n"
            "**MULTA:**\n"
            "A partir de quinta-feira ser√° cobrada taxa di√°ria de R$100,00/dia pela n√£o disponibilidade de recolha.\n\n"
            "**IMPORTANT!**\n"
            "- Todos os materiais devem estar prontos e em perfeita condi√ß√£o para recolha.\n"
            "- √â necess√°rio que haja um respons√°vel no local para liberar o acesso.\n"
            "- A guarda dos materiais √© responsabilidade do cliente, sujeito a cobran√ßa em caso de perda ou dano.\n"
            "- Ser√£o feitas fotos e filmagem dos materiais para respaldo.\n\n"
            "üì¶ Agradecemos a colabora√ß√£o! Equipe de Log√≠stica ‚Äî Chopp Brahma"
        ),
        "palavras_chave": [
            "coleta", "recolha", "recolhimento", "buscar", "retirada", "devolu√ß√£o",
            "hor√°rio coleta", "quando buscam", "rota coleta", "agendar coleta",
            "multa", "taxa", "material", "equipamento", "chopeira", "barril",
            "comodatado", "log√≠stica reversa", "responsabilidade", "aviso"
        ]
    },
    {
        "id": 54,
        "pergunta": "N√£o encontrei minha d√∫vida. Como posso ser atendido?",
        "resposta": (
            "Sentimos muito que voc√™ n√£o tenha encontrado a resposta para sua d√∫vida em nosso FAQ. üòî\n\n"
            "Para um atendimento mais personalizado, por favor, clique no link abaixo para falar diretamente com nossa equipe via WhatsApp:\n\n"
            "üì± [**Clique aqui para falar conosco no WhatsApp!**](https://wa.me/556139717502) \n\n"
            "Ou, se preferir, voc√™ pode nos ligar no **(61) 3971-7502**.\n\n"
            "Estamos prontos para te ajudar!"
        ),
        "palavras_chave": [
            "n√£o encontrei", "minha d√∫vida", "n√£o achei", "falar com atendente", "contato",
            "suporte", "ajuda", "whatsapp", "fale conosco", "atendimento", "outro assunto",
            "telefone", "n√£o consegui a resposta", "qual o numero", "falar com consultor",
            "n√£o √© isso que procuro", "preciso de mais ajuda", "n√£o resolveu", "ainda tenho d√∫vidas",
            "falar com algu√©m", "atendimento humano", "chat", "direcionar", "onde ligo"
        ]
    },
    {
        "id": 55,
        "pergunta": "Quais dados preciso informar para fazer um cadastro ou pedido?",
        "resposta": (
            "Para que possamos processar seu pedido e emitir a Ordem de Servi√ßo e Nota Fiscal, precisamos dos seguintes dados. Por favor, preencha-os com aten√ß√£o:\n\n"
            "--- --- ---\n\n"
            "**DADOS DO EVENTO:**\n"
            "üìÖ *Data do evento:*\n"
            "‚è∞ *Hor√°rio do evento:*\n"
            "üó∫Ô∏è *Endere√ßo do evento:*\n"
            "‚úâÔ∏è *CEP do evento:*\n"
            "üóìÔ∏è *Data da entrega (do equipamento/chopp):*\n\n"
            "**DADOS PESSOAIS / EMPRESARIAIS:**\n"
            "üìß *E-mail:*\n"
            "üë§ *Nome completo / Raz√£o Social:*\n"
            "üè¢ *Nome Fantasia (para CNPJ, se aplic√°vel):*\n"
            "üìû *Telefone:*\n"
            "üÜî *CPF / CNPJ:*\n"
            "üí≥ *RG / √ìrg√£o Emissor (para CPF, se aplic√°vel):*\n"
            "üìù *Inscri√ß√£o Estadual (para CNPJ, se aplic√°vel):*\n"
            "üè° *Endere√ßo da sua resid√™ncia:*\n"
            "üìÆ *CEP da resid√™ncia:*\n\n"
            "**DETALHES DO PEDIDO:**\n"
            "üç∫ *Quantidade de Litros de Chopp:*\n"
            "üí∞ *Forma de Pagamento (Pix ou Cart√£o):*\n\n"
            "--- --- ---\n\n"
            "Agradecemos a sua colabora√ß√£o! Assim que tivermos essas informa√ß√µes, agilizaremos seu pedido."
        ),
        "palavras_chave": [
            "cadastro", "pedido", "dados", "informar dados", "documentos", "o que preciso",
            "requisitos", "fazer pedido", "cadastro de cliente", "solicitar pedido",
            "informa√ß√µes para pedido", "lista de dados", "pedir chopp", "como pedir"
        ]
    }
]

# --- Fun√ß√µes de L√≥gica do Bot (Ass√≠ncronas) ---
def buscar_faq(texto_usuario):
    matches = []
    texto_usuario_lower = texto_usuario.lower()
    for item in faq_data:
        # Verifica se alguma palavra-chave est√° contida no texto do usu√°rio
        if any(palavra_chave in texto_usuario_lower for palavra_chave in item.get("palavras_chave", [])):
            matches.append(item)
    return matches

async def start(update: Update, context):
    logger.info(f"Comando /start recebido de {update.effective_user.first_name} (ID: {update.effective_user.id})")
    try:
        await update.message.reply_text('Ol√°! Bem-vindo ao CHOPP Digital. Como posso te ajudar hoje?')
        logger.info(f"Resposta enviada para /start para {update.effective_user.id}")
    except Exception as e:
        logger.error(f"Erro ao responder ao comando /start para {update.effective_user.id}: {e}", exc_info=True)

async def handle_message(update: Update, context):
    user_text = update.message.text
    if user_text:
        logger.info(f"Mensagem recebida de {update.effective_user.first_name} (ID: {update.effective_user.id}): {user_text}")
        logger.info(f"Buscando FAQ para o texto: '{user_text}'")

        try:
            found_faqs = buscar_faq(user_text)

            if found_faqs:
                faq_ids = [faq['id'] for faq in found_faqs]
                logger.info(f"FAQs encontradas: IDs {faq_ids}")

                if len(found_faqs) == 1:
                    faq_item = found_faqs[0]
                    await update.message.reply_text(faq_item["resposta"], parse_mode='Markdown')
                    logger.info(f"FAQ encontrada e enviada: ID {faq_item['id']} para {update.effective_user.id}")
                else:
                    keyboard = []
                    for faq_item in found_faqs:
                        keyboard.append([InlineKeyboardButton(faq_item["pergunta"], callback_data=str(faq_item["id"]))])
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    await update.message.reply_text('Encontrei algumas op√ß√µes. Qual delas voc√™ gostaria de saber?', reply_markup=reply_markup)
                    logger.info(f"M√∫ltiplas FAQs encontradas. Oferecendo bot√µes para: {[faq['pergunta'] for faq in found_faqs]} para {update.effective_user.id}")
            else:
                # Fallback para a FAQ de "N√£o encontrei minha d√∫vida" (ID 54)
                fallback_faq = next((item for item in faq_data if item["id"] == 54), None)
                if fallback_faq:
                    await update.message.reply_text(fallback_faq["resposta"], parse_mode='Markdown')
                    logger.info(f"Nenhuma FAQ encontrada. Enviando resposta de fallback (ID 54) para {update.effective_user.id}.")
                else:
                    await update.message.reply_text("Desculpe, n√£o consegui encontrar uma resposta para sua pergunta. Por favor, tente reformular ou entre em contato diretamente.")
                    logger.info(f"Nenhuma FAQ encontrada e fallback (ID 54) n√£o configurado para {update.effective_user.id}.")
        except Exception as e:
            logger.error(f"Erro ao processar mensagem ou enviar resposta para {update.effective_user.id}: {e}", exc_info=True)
    else:
        logger.warning(f"Mensagem recebida sem texto de {update.effective_user.first_name} (ID: {update.effective_user.id}). Ignorando.")

async def button_callback_handler(update: Update, context):
    query = update.callback_query
    await query.answer()  # Sempre responda ao callback_query

    faq_id = int(query.data)
    faq_item = next((item for item in faq_data if item["id"] == faq_id), None)

    try:
        if faq_item:
            # Usar edit_message_text para evitar enviar uma nova mensagem
            await query.edit_message_text(faq_item["resposta"], parse_mode='Markdown')
            logger.info(f"Bot√£o de FAQ pressionado e resposta editada por {query.from_user.first_name}: ID {faq_id}")
        else:
            await query.edit_message_text("Desculpe, n√£o consegui encontrar a resposta para esta op√ß√£o.", parse_mode='Markdown')
            logger.warning(f"Bot√£o de FAQ pressionado com ID inv√°lido: {faq_id} por {query.from_user.first_name}")
    except Exception as e:
        logger.error(f"Erro ao processar callback de bot√£o ou editar mensagem para {query.from_user.id}: {e}", exc_info=True)

# --- Setup do Application (global para o worker) ---
application = None
if TELEGRAM_BOT_TOKEN:
    # Use ApplicationBuilder para uma constru√ß√£o mais expl√≠cita
    application = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(CallbackQueryHandler(button_callback_handler))
    logger.info("Application do Telegram Bot constru√≠da e handlers adicionados.")
else:
    logger.critical("N√£o foi poss√≠vel construir o aplicativo Telegram pois o token n√£o foi carregado.")

# --- Fun√ß√µes de Processamento de Atualiza√ß√µes (RQ Worker) ---
# Esta fun√ß√£o ser√° enfileirada e executada pelo worker
async def process_telegram_update(update_json: dict):
    # Re-instanciar o ApplicationBuilder() e adicionar handlers dentro do worker,
    # ou passar a aplica√ß√£o j√° configurada. A melhor pr√°tica √© que o worker
    # tenha sua pr√≥pria inst√¢ncia (ou reutilize uma global, se constru√≠da corretamente).
    # Aqui, garantimos que o bot_instance seja criado para este job espec√≠fico.
    if not TELEGRAM_BOT_TOKEN:
        logger.error("N√£o √© poss√≠vel processar a atualiza√ß√£o: TOKEN do bot n√£o est√° dispon√≠vel.")
        return

    # IMPORTANTE: O Application precisa ser constru√≠do com o mesmo loop de eventos
    # onde o process_update ser√° executado. Para RQ, isso geralmente significa
    # que o 'application' global j√° est√° bom, ou voc√™ o reconstr√≥i.
    # No caso do PTB, a aplica√ß√£o gerencia seu pr√≥prio loop interno.
    if not application:
        logger.critical("A aplica√ß√£o do Telegram n√£o foi inicializada. Imposs√≠vel processar updates.")
        return

    try:
        # A inst√¢ncia do bot √© necess√°ria para o Update.de_json
        bot_instance = Bot(TELEGRAM_BOT_TOKEN)
        update = Update.de_json(update_json, bot_instance)
        logger.info(f"Processando update ID: {update.update_id} na fila do RQ.")
        await application.process_update(update)
        logger.info(f"Update ID: {update.update_id} processado com sucesso.")
    except Exception as e:
        logger.error(f"Erro ao processar update {update_json.get('update_id', 'N/A')} na fila: {e}", exc_info=True)


# --- Rotas do Flask (Web Service) ---
@flask_app.route("/health", methods=["GET"])
def health_check():
    logger.info("Rota /health acessada.")
    # Adicionar uma verifica√ß√£o de sa√∫de do Redis tamb√©m
    if redis_conn and redis_conn.ping():
        return "OK - Redis Connected", 200
    else:
        logger.error("Health check falhou: Redis n√£o conectado.")
        return "ERROR - Redis Disconnected", 500

@flask_app.route("/api/telegram/webhook", methods=["POST"])
def telegram_webhook():
    logger.info("Webhook endpoint hit! (Recebendo requisi√ß√£o do Telegram)")
    if not q: # Verifica se a fila foi inicializada com sucesso
        logger.error("Requisi√ß√£o de webhook recebida, mas a fila do Redis n√£o est√° dispon√≠vel.")
        return jsonify({"status": "error", "message": "Redis Queue not initialized"}), 503 # 503 Service Unavailable

    try:
        update_data = request.get_json(force=True)
        # Logar apenas o update_id ou uma parte para evitar logs muito grandes
        logger.info(f"Dados da atualiza√ß√£o recebidos (ID: {update_data.get('update_id', 'N/A')}).")

        # Enfileira a atualiza√ß√£o para ser processada pelo worker
        # job_timeout deve ser adequado para o tempo m√°ximo que um handler pode levar
        job = q.enqueue(process_telegram_update, update_data, job_timeout='5m')
        logger.info(f"Atualiza√ß√£o enfileirada para o RQ. Job ID: {job.id}")

        return jsonify({"status": "ok", "job_id": job.id}), 200
    except Exception as e:
        logger.error(f"Erro ao enfileirar atualiza√ß√£o do webhook: {e}", exc_info=True)
        return jsonify({"status": "error", "message": str(e)}), 500

# --- Fun√ß√µes de Inicializa√ß√£o (para Procfile) ---

async def _set_webhook():
    """Fun√ß√£o interna para configurar o webhook."""
    if not TELEGRAM_BOT_TOKEN:
        logger.error("N√£o √© poss√≠vel configurar o webhook: TOKEN do bot n√£o est√° dispon√≠vel.")
        return

    try:
        bot_instance = Bot(TELEGRAM_BOT_TOKEN)
        webhook_info = await bot_instance.get_webhook_info()
        current_webhook_url = webhook_info.url

        if current_webhook_url != WEBHOOK_URL:
            logger.info(f"URL do webhook atual ({current_webhook_url}) √© diferente da desejada ({WEBHOOK_URL}). Configurando...")
            await bot_instance.set_webhook(url=WEBHOOK_URL)
            logger.info(f"Webhook definido para: {WEBHOOK_URL}")
        else:
            logger.info("Webhook j√° est√° configurado corretamente.")
    except Exception as e:
        logger.error(f"Erro ao configurar webhook: {e}", exc_info=True)

def start_web_service():
    """Inicia o servidor Flask e configura o webhook."""
    logger.info("Iniciando setup do Web Service (Flask e Webhook).")
    try:
        # A forma mais robusta de executar uma fun√ß√£o ass√≠ncrona na inicializa√ß√£o
        # de um aplicativo Flask/Gunicorn √© usar um thread separado ou assegurar
        # que o loop de eventos esteja dispon√≠vel.
        # Para evitar problemas com o Gunicorn que pode criar seu pr√≥prio loop,
        # √© melhor criar um novo loop para a fun√ß√£o ou usar um executor.
        def run_webhook_setup():
            asyncio.run(_set_webhook())

        # Inicia a configura√ß√£o do webhook em um thread separado para n√£o bloquear o Flask
        webhook_thread = threading.Thread(target=run_webhook_setup)
        webhook_thread.start()
        logger.info("Thread de configura√ß√£o de webhook iniciada.")
    except Exception as e:
        logger.error(f"Erro ao iniciar thread de configura√ß√£o de webhook: {e}", exc_info=True)

    logger.info("Servidor Flask pronto para ser iniciado pelo Gunicorn.")
    # No ambiente Render, o Gunicorn √© respons√°vel por rodar o flask_app.run()
    # N√£o chame flask_app.run() diretamente aqui, a menos que seja para teste local.


def run_ptb_worker():
    """Inicia o worker RQ para processar as mensagens do Telegram."""
    if not TELEGRAM_BOT_TOKEN:
        logger.critical("N√£o foi poss√≠vel iniciar o worker do Telegram: TOKEN do bot n√£o est√° dispon√≠vel.")
        return

    if not application:
        logger.critical("N√£o foi poss√≠vel iniciar o worker do Telegram: Aplica√ß√£o do Telegram n√£o foi constru√≠da.")
        return

    if not q:
        logger.critical("N√£o foi poss√≠vel iniciar o worker do Telegram: Fila do Redis n√£o est√° dispon√≠vel. Worker n√£o pode iniciar.")
        return

    logger.info("Iniciando o worker RQ para processar updates do Telegram.")
    try:
        # O Worker precisa da conex√£o Redis.
        worker = Worker([q], connection=redis_conn)
        worker.work() # Isso inicia o loop do worker
    except Exception as e:
        logger.critical(f"ERRO CR√çTICO no worker RQ: {e}", exc_info=True)


# --- Bloco de Execu√ß√£o Principal (para testes locais) ---
if __name__ == '__main__':
    logger.info("Executando bot.py no bloco __main__ (provavelmente para teste local).")
    # Para teste local:
    # 1. Certifique-se de ter Redis rodando localmente (ex: docker run -p 6379:6379 redis)
    # 2. Em um terminal, inicie o worker:
    #    python -c "from bot import run_ptb_worker; run_ptb_worker()"
    # 3. Em outro terminal, inicie o Flask (para o webhook):
    #    python -c "from bot import flask_app, start_web_service; start_web_service(); flask_app.run(host='0.0.0.0', port=5000)"
    # 4. Configure manualmente o webhook do Telegram para http://<SEU_IP_LOCAL>:5000/api/telegram/webhook

    # Apenas para exemplo de como voc√™ chamaria as fun√ß√µes de inicializa√ß√£o:
    # start_web_service() # Isso configura o webhook no startup
    # flask_app.run(host='0.0.0.0', port=5000, debug=True) # Rode o Flask para o webhook

    # No ambiente Render, o Procfile ir√° chamar essas fun√ß√µes.
    # Ex: web: gunicorn bot:flask_app --bind 0.0.0.0:$PORT --worker-class gevent
    # Ex: worker: python -c "from bot import run_ptb_worker; run_ptb_worker()"
