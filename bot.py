import logging
import os
import asyncio
import json
import threading
from flask import Flask, request, jsonify
from telegram import Update, Bot, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, MessageHandler, filters, CallbackQueryHandler, CommandHandler

# Para a fila com Redis
import redis
from rq import Queue

# Configura√ß√£o de logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logger = logging.getLogger(__name__)

# Seu TOKEN do Bot do Telegram
TELEGRAM_BOT_TOKEN = os.getenv("BOT_TOKEN")

# URL do Redis (do Render)
REDIS_URL = os.getenv("REDIS_URL", "redis://localhost:6379/0") # Render popula REDIS_URL automaticamente

# Verifica√ß√£o para garantir que o token foi carregado
if not TELEGRAM_BOT_TOKEN:
    logger.error("ERRO: A vari√°vel de ambiente 'BOT_TOKEN' n√£o foi encontrada. Certifique-se de que est√° configurada no Render.")

WEBHOOK_URL = os.getenv("RENDER_EXTERNAL_HOSTNAME")
if WEBHOOK_URL:
    WEBHOOK_URL = f"https://{WEBHOOK_URL}/api/telegram/webhook"
else:
    WEBHOOK_URL = "https://botchopp.onrender.com/api/telegram/webhook" # Fallback

# Conecta ao Redis
try:
    redis_conn = redis.from_url(REDIS_URL)
    q = Queue(connection=redis_conn)
    logger.info(f"Conectado ao Redis em: {REDIS_URL}")
except Exception as e:
    logger.critical(f"ERRO: N√£o foi poss√≠vel conectar ao Redis em {REDIS_URL}: {e}", exc_info=True)
    # No ambiente de produ√ß√£o, voc√™ pode querer sair ou ter um fallback
    redis_conn = None
    q = None

# Inst√¢ncia do Flask
flask_app = Flask(__name__)

# Dados do FAQ (exemplo simplificado, voc√™ carregaria do seu JSON)
# ... (manter seu faq_data completo aqui)
faq_data = [
    {
        "id": 1,
        "pergunta": "Mensagem de boas-vindas",
        "resposta": "Bem-vindo ao nosso servi√ßo!",
        "palavras_chave": ["boas-vindas", "oi", "ol√°", "come√ßar"]
    },
    {
        "id": 2,
        "pergunta": "Como saber quantos litros de chope preciso para o meu evento?",
        "resposta": "Para estimar a quantidade de chopp, considere 1,5 a 2 litros por pessoa para eventos de 4 horas.",
        "palavras_chave": ["litros", "quantidade", "evento", "chope", "cerveja"]
    },
    {
        "id": 3,
        "pergunta": "Qual √© o hor√°rio de atendimento de voc√™s?",
        "resposta": "Nosso hor√°rio de atendimento √© de segunda a sexta, das 9h √†s 18h.",
        "palavras_chave": ["hor√°rio", "atendimento", "abertura", "funciona"]
    },
    {
        "id": 53,
        "pergunta": "Como funciona a coleta/recolha do equipamento (chopeira, barril)?",
        "resposta": (
            "‚ö†Ô∏è AVISO INFORMATIVO ‚Äî RECOLHA DO MATERIAL COMODATADO\n\n"
            "Este informativo orienta a coleta dos materiais (chopeira, barril, etc.) de acordo com a rota estabelecida durante o hor√°rio comercial.\n\n"
            "**CRIT√âRIO:**\n"
            "As coletas seguem uma rota definida pela empresa para atender o maior n√∫mero de clientes por regi√£o, podendo ser alterada semanalmente conforme a demanda.\n\n"
            "**HOR√ÅRIO DE COLETA | ROTA:**\n"
            "N√£o realizamos coleta agendada. As coletas ocorrem por per√≠odo:\n"
            "üïò Manh√£ / Tarde\n"
            "üìÜ Segunda √† Ter√ßa-feira ‚Äî das 9h √†s 18h\n\n"
            "**REGIME DE EXCE√á√ÉO (ALTA DEMANDA):**\n"
            "Conforme crit√©rio da empresa, a coleta pode se estender para:\n"
            "üìÜ Quarta-feira ‚Äî das 9h √†s 18h\n\n"
            "üö´ N√£o fazemos desvios de rota para atendimento personalizado.\n\n"
            "**COMUNICA√á√ÉO COM O CLIENTE:**\n"
            "- A empresa far√° contato durante a rota para garantir a presen√ßa de um respons√°vel.\n"
            "- Em caso de insucesso no contato, a rota ser√° reavaliada e reprogramada at√© quarta-feira.\n"
            "- Se houver imprevistos, o cliente deve entrar em contato com a loja para entender a rota.\n"
            "- Caso a rota n√£o atenda √† necessidade, o cliente deve providenciar um substituto para liberar o material.\n\n"
            "**MULTA:**\n"
            "A partir de quinta-feira ser√° cobrada taxa di√°ria de R$100,00/dia pela n√£o disponibilidade de recolha.\n\n"
            "**IMPORTANT!**\n"
            "- Todos os materiais devem estar prontos e em perfeita condi√ß√£o para recolha.\n"
            "- √â necess√°rio que haja um respons√°vel no local para liberar o acesso.\n"
            "- A guarda dos materiais √© responsabilidade do cliente, sujeito a cobran√ßa em caso de perda ou dano.\n"
            "- Ser√£o feitas fotos e filmagem dos materiais para respaldo.\n\n"
            "üì¶ Agradecemos a colabora√ß√£o! Equipe de Log√≠stica ‚Äî Chopp Brahma"
        ),
        "palavras_chave": [
            "coleta", "recolha", "recolhimento", "buscar", "retirada", "devolu√ß√£o",
            "hor√°rio coleta", "quando buscam", "rota coleta", "agendar coleta",
            "multa", "taxa", "material", "equipamento", "chopeira", "barril",
            "comodatado", "log√≠stica reversa", "responsabilidade", "aviso"
        ]
    },
    {
        "id": 54,
        "pergunta": "N√£o encontrei minha d√∫vida. Como posso ser atendido?",
        "resposta": (
            "Sentimos muito que voc√™ n√£o tenha encontrado a resposta para sua d√∫vida em nosso FAQ. üòî\n\n"
            "Para um atendimento mais personalizado, por favor, clique no link abaixo para falar diretamente com nossa equipe via WhatsApp:\n\n"
            "üì± [**Clique aqui para falar conosco no WhatsApp!**](https://wa.me/556139717502) \n\n"
            "Ou, se preferir, voc√™ pode nos ligar no **(61) 3971-7502**.\n\n"
            "Estamos prontos para te ajudar!"
        ),
        "palavras_chave": [
            "n√£o encontrei", "minha d√∫vida", "n√£o achei", "falar com atendente", "contato",
            "suporte", "ajuda", "whatsapp", "fale conosco", "atendimento", "outro assunto",
            "telefone", "n√£o consegui a resposta", "qual o numero", "falar com consultor",
            "n√£o √© isso que procuro", "preciso de mais ajuda", "n√£o resolveu", "ainda tenho d√∫vidas",
            "falar com algu√©m", "atendimento humano", "chat", "direcionar", "onde ligo"
        ]
    },
    {
        "id": 55,
        "pergunta": "Quais dados preciso informar para fazer um cadastro ou pedido?",
        "resposta": (
            "Para que possamos processar seu pedido e emitir a Ordem de Servi√ßo e Nota Fiscal, precisamos dos seguintes dados. Por favor, preencha-os com aten√ß√£o:\n\n"
            "--- --- ---\n\n"
            "**DADOS DO EVENTO:**\n"
            "üìÖ *Data do evento:*\n"
            "‚è∞ *Hor√°rio do evento:*\n"
            "üó∫Ô∏è *Endere√ßo do evento:*\n"
            "‚úâÔ∏è *CEP do evento:*\n"
            "üóìÔ∏è *Data da entrega (do equipamento/chopp):*\n\n"
            "**DADOS PESSOAIS / EMPRESARIAIS:**\n"
            "üìß *E-mail:*\n"
            "üë§ *Nome completo / Raz√£o Social:*\n"
            "üè¢ *Nome Fantasia (para CNPJ, se aplic√°vel):*\n"
            "üìû *Telefone:*\n"
            "üÜî *CPF / CNPJ:*\n"
            "üí≥ *RG / √ìrg√£o Emissor (para CPF, se aplic√°vel):*\n"
            "üìù *Inscri√ß√£o Estadual (para CNPJ, se aplic√°vel):*\n"
            "üè° *Endere√ßo da sua resid√™ncia:*\n"
            "üìÆ *CEP da resid√™ncia:*\n\n"
            "**DETALHES DO PEDIDO:**\n"
            "üç∫ *Quantidade de Litros de Chopp:*\n"
            "üí∞ *Forma de Pagamento (Pix ou Cart√£o):*\n\n"
            "--- --- ---\n\n"
            "Agradecemos a sua colabora√ß√£o! Assim que tivermos essas informa√ß√µes, agilizaremos seu pedido."
        ),
        "palavras_chave": [
            "cadastro", "pedido", "dados", "informar dados", "documentos", "o que preciso",
            "requisitos", "fazer pedido", "cadastro de cliente", "solicitar pedido",
            "informa√ß√µes para pedido", "lista de dados", "pedir chopp", "como pedir"
        ]
    }
]

# Fun√ß√£o para buscar FAQ
def buscar_faq(texto_usuario):
    matches = []
    texto_usuario_lower = texto_usuario.lower()
    for item in faq_data:
        for palavra_chave in item.get("palavras_chave", []):
            if palavra_chave in texto_usuario_lower:
                matches.append(item)
                break
    return matches

# Handlers do Telegram Bot (ass√≠ncronos, ser√£o chamados pelo Worker)
async def start(update: Update, context):
    logger.info(f"Comando /start recebido de {update.effective_user.first_name} (ID: {update.effective_user.id})")
    try:
        await update.message.reply_text('Ol√°! Bem-vindo ao CHOPP Digital. Como posso te ajudar hoje?')
        logger.info(f"Resposta enviada para /start para {update.effective_user.id}")
    except Exception as e:
        logger.error(f"Erro ao responder ao comando /start para {update.effective_user.id}: {e}", exc_info=True)

async def handle_message(update: Update, context):
    user_text = update.message.text
    if user_text:
        logger.info(f"Mensagem recebida de {update.effective_user.first_name} (ID: {update.effective_user.id}): {user_text}")
        logger.info(f"Buscando FAQ para o texto: '{user_text}'")

        try:
            found_faqs = buscar_faq(user_text)

            if found_faqs:
                faq_ids = [faq['id'] for faq in found_faqs]
                logger.info(f"FAQs encontradas: IDs {faq_ids}")

                if len(found_faqs) == 1:
                    faq_item = found_faqs[0]
                    await update.message.reply_text(faq_item["resposta"], parse_mode='Markdown')
                    logger.info(f"FAQ encontrada e enviada: ID {faq_item['id']} para {update.effective_user.id}")
                else:
                    keyboard = []
                    for faq_item in found_faqs:
                        keyboard.append([InlineKeyboardButton(faq_item["pergunta"], callback_data=str(faq_item["id"]))])
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    await update.message.reply_text('Encontrei algumas op√ß√µes. Qual delas voc√™ gostaria de saber?', reply_markup=reply_markup)
                    logger.info(f"M√∫ltiplas FAQs encontradas. Oferecendo bot√µes para: {[faq['pergunta'] for faq in found_faqs]} para {update.effective_user.id}")
            else:
                fallback_faq = next((item for item in faq_data if item["id"] == 54), None)
                if fallback_faq:
                    await update.message.reply_text(fallback_faq["resposta"], parse_mode='Markdown')
                    logger.info(f"Nenhuma FAQ encontrada. Enviando resposta de fallback (ID 54) para {update.effective_user.id}.")
                else:
                    await update.message.reply_text("Desculpe, n√£o consegui encontrar uma resposta para sua pergunta. Por favor, tente reformular ou entre em contato diretamente.")
                    logger.info(f"Nenhuma FAQ encontrada e fallback (ID 54) n√£o configurado para {update.effective_user.id}.")
        except Exception as e:
            logger.error(f"Erro ao processar mensagem ou enviar resposta para {update.effective_user.id}: {e}", exc_info=True)
    else:
        logger.warning(f"Mensagem recebida sem texto de {update.effective_user.first_name} (ID: {update.effective_user.id}). Ignorando.")


async def button_callback_handler(update: Update, context):
    query = update.callback_query
    await query.answer()

    faq_id = int(query.data)
    faq_item = next((item for item in faq_data if item["id"] == faq_id), None)

    try:
        if faq_item:
            await query.edit_message_text(faq_item["resposta"], parse_mode='Markdown')
            logger.info(f"Bot√£o de FAQ pressionado e resposta enviada por {query.from_user.first_name}: ID {faq_id}")
        else:
            await query.edit_message_text("Desculpe, n√£o consegui encontrar a resposta para esta op√ß√£o.", parse_mode='Markdown')
            logger.warning(f"Bot√£o de FAQ pressionado com ID inv√°lido: {faq_id} por {query.from_user.first_name}")
    except Exception as e:
        logger.error(f"Erro ao processar callback de bot√£o ou editar mensagem para {query.from_user.id}: {e}", exc_info=True)


# Setup do Application (global para o worker)
application = None
if TELEGRAM_BOT_TOKEN:
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(CallbackQueryHandler(button_callback_handler))
else:
    logger.critical("N√£o foi poss√≠vel iniciar o aplicativo Telegram pois o token n√£o foi carregado.")


# Fun√ß√£o para processar updates (ser√° enfileirada e executada pelo worker)
async def process_telegram_update(update_json: dict):
    if not TELEGRAM_BOT_TOKEN:
        logger.error("N√£o √© poss√≠vel processar a atualiza√ß√£o: TOKEN do bot n√£o est√° dispon√≠vel.")
        return

    if not application:
        logger.error("N√£o √© poss√≠vel processar a atualiza√ß√£o: A aplica√ß√£o do Telegram n√£o foi inicializada.")
        return

    try:
        # Re-cria o bot_instance para o contexto atual do worker
        bot_instance = Bot(TELEGRAM_BOT_TOKEN)
        update = Update.de_json(update_json, bot_instance)
        logger.info(f"Processando update ID: {update.update_id} na fila do RQ.")
        await application.process_update(update)
        logger.info(f"Update ID: {update.update_id} processado com sucesso.")
    except Exception as e:
        logger.error(f"Erro ao processar update {update_json.get('update_id', 'N/A')} na fila: {e}", exc_info=True)


# Rota para o health check do Render.com (para o Web Service)
@flask_app.route("/health", methods=["GET"])
def health_check():
    logger.info("Rota /health acessada.")
    return "OK", 200

# Rota do Webhook do Telegram (para o Web Service)
@flask_app.route("/api/telegram/webhook", methods=["POST"])
def telegram_webhook():
    logger.info("Webhook endpoint hit! (Recebendo requisi√ß√£o do Telegram)")
    if q: # Verifica se a fila foi inicializada
        try:
            update_data = request.get_json(force=True)
            logger.info(f"Dados da atualiza√ß√£o recebidos: {json.dumps(update_data, indent=2)}")

            # Enfileira a atualiza√ß√£o para ser processada pelo worker
            job = q.enqueue(process_telegram_update, update_data, job_timeout='5m') # Aumentar timeout se precisar
            logger.info(f"Atualiza√ß√£o enfileirada para o RQ. Job ID: {job.id}")

            return jsonify({"status": "ok", "job_id": job.id}), 200
        except Exception as e:
            logger.error(f"Erro ao enfileirar atualiza√ß√£o do webhook: {e}", exc_info=True)
            return jsonify({"status": "error", "message": str(e)}), 500
    else:
        logger.error("Requisi√ß√£o de webhook recebida, mas a fila do Redis n√£o est√° dispon√≠vel.")
        return jsonify({"status": "error", "message": "Redis Queue not initialized"}), 500

# Fun√ß√£o para configurar o webhook na inicializa√ß√£o (para o Web Service)
async def set_webhook_on_startup():
    if not TELEGRAM_BOT_TOKEN:
        logger.error("N√£o √© poss√≠vel configurar o webhook: TOKEN do bot n√£o est√° dispon√≠vel.")
        return

    try:
        bot_instance = Bot(TELEGRAM_BOT_TOKEN)
        webhook_info = await bot_instance.get_webhook_info()
        current_webhook_url = webhook_info.url

        if current_webhook_url != WEBHOOK_URL:
            logger.info(f"URL do webhook atual ({current_webhook_url}) √© diferente da desejada ({WEBHOOK_URL}). Configurando...")
            await bot_instance.set_webhook(url=WEBHOOK_URL)
            logger.info(f"Webhook definido para: {WEBHOOK_URL}")
        else:
            logger.info("Webhook j√° est√° configurado corretamente.")
    except Exception as e:
        logger.error(f"Erro ao configurar webhook: {e}", exc_info=True)

# Fun√ß√£o para ser chamada pelo Web Service na inicializa√ß√£o (chamada no Procfile)
def start_web_service():
    logger.info("Iniciando setup do Web Service (Flask e Webhook).")
    try:
        # A configura√ß√£o do webhook precisa ser executada no loop de eventos principal
        # se Gunicorn/Flask n√£o tiver um loop j√° rodando.
        # No Render, o Gunicorn pode ter seu pr√≥prio loop. Vamos tentar isso:
        asyncio.run(set_webhook_on_startup())
        logger.info("Webhook configurado com sucesso (ou j√° estava configurado).")
    except RuntimeError:
        current_loop = asyncio.get_event_loop()
        if current_loop.is_running():
            current_loop.create_task(set_webhook_on_startup())
            logger.info("Webhook agendado para configura√ß√£o no loop existente.")
        else:
            logger.error("N√£o foi poss√≠vel configurar o webhook na inicializa√ß√£o: nenhum loop de eventos dispon√≠vel e um RuntimeError ocorreu.")
            raise

    logger.info("Servidor Flask pronto para ser iniciado pelo Gunicorn.")

# Fun√ß√£o para ser chamada pelo Background Worker (chamada no Procfile)
def run_ptb_worker():
    if not TELEGRAM_BOT_TOKEN:
        logger.critical("N√£o foi poss√≠vel iniciar o worker do Telegram: TOKEN do bot n√£o est√° dispon√≠vel.")
        return

    if not application:
        logger.critical("N√£o foi poss√≠vel iniciar o worker do Telegram: Aplica√ß√£o do Telegram n√£o foi constru√≠da.")
        return

    if not q:
        logger.critical("N√£o foi poss√≠vel iniciar o worker do Telegram: Fila do Redis n√£o est√° dispon√≠vel.")
        return

    logger.info("Iniciando o worker RQ para processar updates do Telegram.")
    # Este √© o comando do RQ worker
    from rq import Worker
    worker = Worker([q], connection=redis_conn)
    worker.work()

# Este bloco s√≥ √© executado se o arquivo for rodado diretamente
if __name__ == '__main__':
    logger.info("Executando bot.py no bloco __main__ (provavelmente para teste local).")
    # Para teste local:
    # 1. Certifique-se de ter Redis rodando localmente (docker run -p 6379:6379 redis)
    # 2. Rode o worker em um terminal: python -c "from bot import run_ptb_worker; run_ptb_worker()"
    # 3. Rode o Flask em outro terminal: flask run --port 5000 (ou com gunicorn)
    #    E configure o webhook do Telegram para http://localhost:5000/api/telegram/webhook
    start_web_service() # Apenas configura o webhook
    flask_app.run(port=5000) # Para teste local do Flask
